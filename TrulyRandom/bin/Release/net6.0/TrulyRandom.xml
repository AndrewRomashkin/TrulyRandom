<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TrulyRandom</name>
    </assembly>
    <members>
        <member name="T:TrulyRandom.Devices.AudioDevice">
            <summary>
            Represents an audio Direct Show device
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.AudioDevice.AvgBytesPerSecond">
            <summary>
            Bitrate reported by device
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.AudioDevice.BitsPerSample">
            <summary>
            Bits per sample reported by device
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.AudioDevice.Channels">
            <summary>
            Amount of channels on this device
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.AudioDevice.SamplesPerSecond">
            <summary>
            Samples per second reported by device
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.AudioDevice.#ctor(System.Int32)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Devices.AudioDevice"/> object by searching through available audio devices and attempting to get alternating samples from those
            </summary>
            <exception cref="T:TrulyRandom.DeviceNotFoundException">Thrown when no suitable devices found. If device is found and then goes offline object will keep trying to establish connection and no exception will be thrown</exception>
            <param name="autoSearchTimeout">Timeout for waiting for data from the device</param>
        </member>
        <member name="M:TrulyRandom.Devices.AudioDevice.#ctor(TrulyRandom.Devices.DeviceDescriptor)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Devices.AudioDevice"/> object from given <c>DeviceDescriptor</c>. If device is unavailable object will keep trying to establish connection and no exception will be thrown
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.AudioDevice.#ctor(System.String,System.String)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Devices.AudioDevice"/> object from given name and moniker string. If device is unavailable object will keep trying to establish connection and no exception will be thrown
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.AudioDevice.AvailableDevices">
            <summary>
            Returns all audio device descriptors currently available in the system
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.AudioDevice.GetTypeSync">
            <summary>
            Returns a static lock object for all instances of this type
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.AudioDevice.FindFirstOperationalDevice(System.Int32)">
            <summary>
            Finds first operational audio device. If none found returns <c>null</c>
            </summary>
            <param name="timeout">Timeout for waiting for data from the device</param>
            <returns>Descriptor of the first operational device found</returns>
        </member>
        <member name="M:TrulyRandom.Devices.AudioDevice.GetThreadName">
            <summary>
            Returns unique thread name
            </summary>
            <returns>Unique thread name</returns>
        </member>
        <member name="T:TrulyRandom.Devices.DeviceDescriptor">
            <summary>
            Describes a DirectShow device
            </summary>
        </member>
        <member name="F:TrulyRandom.Devices.DeviceDescriptor.Name">
            <summary>
            Name of the device
            </summary>
        </member>
        <member name="F:TrulyRandom.Devices.DeviceDescriptor.MonikerString">
            <summary>
            Unique device path
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.DeviceDescriptor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.Devices.DeviceDescriptor" /> class
            </summary>
            <param name="name">Device name</param>
            <param name="monikerString">Unique device path</param>
        </member>
        <member name="T:TrulyRandom.Devices.DirectShowDevice">
            <summary>
            Basic class for Direct Show devices
            </summary>
        </member>
        <member name="F:TrulyRandom.Devices.DirectShowDevice.run">
            <summary>
            Determines whether device should be running
            </summary>
        </member>
        <member name="F:TrulyRandom.Devices.DirectShowDevice.running">
            <summary>
            Show whether device is running
            </summary>
        </member>
        <member name="F:TrulyRandom.Devices.DirectShowDevice.dispose">
            <summary>
            Determines whether device should be disposed
            </summary>
        </member>
        <member name="F:TrulyRandom.Devices.DirectShowDevice.disposed">
            <summary>
            Show whether device is disposed
            </summary>
        </member>
        <member name="F:TrulyRandom.Devices.DirectShowDevice.lastException">
            <summary>
            Last exception thrown within the main loop
            </summary>
        </member>
        <member name="F:TrulyRandom.Devices.DirectShowDevice.monikerString">
            <summary>
            Unique device path
            </summary>
        </member>
        <member name="F:TrulyRandom.Devices.DirectShowDevice.thread">
            <summary>
            Main thread of the object
            </summary>
        </member>
        <member name="E:TrulyRandom.Devices.DirectShowDevice.NewData">
            <summary>
            Fires when new data from the device is recieved
            </summary>
        </member>
        <member name="E:TrulyRandom.Devices.DirectShowDevice.NewException">
            <summary>
            Fires when new exception is thrown within the main loop
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.DirectShowDevice.Running">
            <summary>
            Shows whether device is running
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.DirectShowDevice.Disposed">
            <summary>
            Shows whether device is disposed
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.DirectShowDevice.LastException">
            <summary>
            Last exception thrown within the main loop
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.DirectShowDevice.Still">
            <summary>
            Shows if the device keeps returning same samples. It happens when audio input is silent or camera image is frozen
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.DirectShowDevice.FilterOutput">
            <summary>
            Determines whether repeating samples should be discarded
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.DirectShowDevice.SamplesRecieved">
            <summary>
            Return count of samples receved
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.DirectShowDevice.ActualSampleRate">
            <summary>
            Return actual average sample rate  
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.DirectShowDevice.ActualBytesPerSample">
            <summary>
            Return actual average bytes per sample 
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.DirectShowDevice.ActualBytesPerSecond">
            <summary>
            Return actual average bytes per second
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.DirectShowDevice.Name">
            <summary>
            Device name
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.Start">
            <summary>
            Starts capture
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.Stop">
            <summary>
            Stops capture
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.Dispose">
            <summary>
            Releases all resources used by this object
            </summary>
        </member>
        <member name="F:TrulyRandom.Devices.DirectShowDevice.devicesInUse">
            <summary>
            Stores a list of moniker strings of all devices currently used by any instance of this object
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.GetAvailableDevices(System.Guid)">
            <summary>
            Returns all device descriptors of given type currently available in the system
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.LockDevice(System.String)">
            <summary>
            Locks specified device so it can't be accessed by another instance
            </summary>
            <param name="monikerString">Moniker string of the device to be locked</param>
            <returns><c>True</c> is device was locked successfully</returns>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.ReleaseDevice(System.String)">
            <summary>
            Unocks specified device so it can be accessed by another instance
            </summary>
            <param name="monikerString">Moniker string of the device to be unlocked</param>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.FindFirstOperationalDevice(System.Int32,System.Type,System.Guid)">
            <summary>
            Finds first operational device of the given type. If none found returns <c>null</c>
            </summary>
            <param name="timeout">Timeout for waiting for data from the device</param>
            <param name="deviceType">Device type</param>
            <param name="deviceTypeGuid">Device type GUID</param>
            <returns>Descriptor of the first operational device found</returns>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.GetTypeSync">
            <summary>
            Returns a static lock object for all instances of this type
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.#ctor(System.Int32)">
            <summary>
            Creates new DirectShow device by searching through available devices and attempting to get alternating samples from those
            </summary>
            <exception cref="T:TrulyRandom.DeviceNotFoundException">Thrown when no suitable devices found. If device is found and then goes offline object will keep trying to establish connection and no exception will be thrown</exception>
            <param name="autoSearchTimeout">Timeout for waiting for data from the device</param>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.#ctor(TrulyRandom.Devices.DeviceDescriptor)">
            <summary>
            Creates new DirectShow device from given <see cref="T:TrulyRandom.Devices.DeviceDescriptor"/>. If device is unavailable object will keep trying to establish connection and no exception will be thrown
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.#ctor(System.String,System.String)">
            <summary>
            Creates new DirectShow device from given name and moniker string. If device is unavailable object will keep trying to establish connection and no exception will be thrown
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.WorkerThread">
            <summary>
            Main loop
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.Grabber_NewData(System.Byte[])">
            <summary>
            Handler for the data from the device
            </summary>
            <param name="data">Sample data</param>
        </member>
        <member name="M:TrulyRandom.Devices.DirectShowDevice.Finalize">
            <summary>
            Finalizes the object
            </summary>
        </member>
        <member name="T:TrulyRandom.Devices.VideoDevice">
            <summary>
            Represents a video Direct Show device
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.VideoDevice.Resolution">
            <summary>
            Resolution reported by device
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.VideoDevice.FPS">
            <summary>
            FPS reported by device
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.VideoDevice.BitDepth">
            <summary>
            Bit depth reported by device
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.VideoDevice.#ctor(System.Int32)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Devices.VideoDevice"/> object by searching through available video devices and attempting to get alternating samples from those
            </summary>
            <exception cref="T:TrulyRandom.DeviceNotFoundException">Thrown when no suitable devices found. If device is found and then goes offline object will keep trying to establish connection and no exception will be thrown</exception>
            <param name="autoSearchTimeout">Timeout for waiting for data from the device</param>
        </member>
        <member name="M:TrulyRandom.Devices.VideoDevice.#ctor(TrulyRandom.Devices.DeviceDescriptor)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Devices.VideoDevice"/> object from given <c>DeviceDescriptor</c>. If device is unavailable object will keep trying to establish connection and no exception will be thrown
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.VideoDevice.#ctor(System.String,System.String)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Devices.VideoDevice"/> object from given name and moniker string. If device is unavailable object will keep trying to establish connection and no exception will be thrown
            </summary>
        </member>
        <member name="P:TrulyRandom.Devices.VideoDevice.AvailableDevices">
            <summary>
            Returns all audio device descriptors currently available in the system
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.VideoDevice.GetTypeSync">
            <summary>
            Returns a static lock object for all instances of this type
            </summary>
        </member>
        <member name="M:TrulyRandom.Devices.VideoDevice.FindFirstOperationalDevice(System.Int32)">
            <summary>
            Finds first operational video device. If none found returns <c>null</c>
            </summary>
            <param name="timeout">Timeout for waiting for data from the device</param>
            <returns>Descriptor of the first operational device found</returns>
        </member>
        <member name="M:TrulyRandom.Devices.VideoDevice.GetThreadName">
            <summary>
            Returns unique thread name
            </summary>
            <returns>Unique thread name</returns>
        </member>
        <member name="M:TrulyRandom.DirectShow.AudioCapabilities.FromStreamConfig(TrulyRandom.DirectShow.IAMStreamConfig_Audio)">
            <summary>
            Retrieves capabilities of an audio device
            </summary>
            <param name="audioStreamConfig"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TrulyRandom.DirectShow.AudioCapabilities.#ctor(TrulyRandom.DirectShow.IAMStreamConfig_Audio,System.Int32)">
            <summary>
            Retrieves capabilities of an audio device
            </summary>
            <param name="audioStreamConfig"></param>
            <param name="index"></param>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:TrulyRandom.DirectShow.AudioCapabilities.Equals(System.Object)">
            <summary>
            Check if the audio capability equals to the specified object.
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>Returns true if both are equal are equal or false otherwise</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.AudioCapabilities.Equals(TrulyRandom.DirectShow.AudioCapabilities)">
            <summary>
            Check if two audio capabilities are equal
            </summary>
            <param name="ac2">Second audio capability to compare with</param>
            <returns>Returns true if both audio capabilities are equal or false otherwise</returns>
        </member>
        <member name="M:TrulyRandom.DirectShow.AudioCapabilities.GetHashCode">
            <summary>
            Get hash code of the object
            </summary>
            <returns>Returns hash code ot the object</returns>
        </member>
        <member name="M:TrulyRandom.DirectShow.AudioCapabilities.op_Equality(TrulyRandom.DirectShow.AudioCapabilities,TrulyRandom.DirectShow.AudioCapabilities)">
            <summary>
            Equality operator
            </summary>
            <param name="a">First object to check</param>
            <param name="b">Seconds object to check</param>
            <returns>Return true if both objects are equal or false otherwise.</returns>
        </member>
        <member name="M:TrulyRandom.DirectShow.AudioCapabilities.op_Inequality(TrulyRandom.DirectShow.AudioCapabilities,TrulyRandom.DirectShow.AudioCapabilities)">
            <summary>
            Inequality operator
            </summary>
            <param name="a">First object to check</param>
            <param name="b">Seconds object to check</param>
            <returns>Return true if both objects are not equal or false otherwise</returns>
        </member>
        <member name="F:TrulyRandom.DirectShow.PinDirection.Input">
            <summary>
            Input pin.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PinDirection.Output">
            <summary>
            Output pin.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.Default">
            <summary>
            Default value of connection type. Physically it does not exist, but just either to specify that
            connection type should not be changed (input) or was not determined (output).
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoTuner">
            <summary>
            Specifies a tuner pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoComposite">
            <summary>
            Specifies a composite pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoSVideo">
            <summary>
            Specifies an S-Video (Y/C video) pin.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoRGB">
            <summary>
            Specifies an RGB pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoYRYBY">
            <summary>
            Specifies a YRYBY (Y, R–Y, B–Y) pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoSerialDigital">
            <summary>
            Specifies a serial digital pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoParallelDigital">
            <summary>
            Specifies a parallel digital pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoSCSI">
            <summary>
            Specifies a SCSI (Small Computer System Interface) pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoAUX">
            <summary>
            Specifies an AUX (auxiliary) pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.Video1394">
            <summary>
            Specifies an IEEE 1394 pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoUSB">
            <summary>
            Specifies a USB (Universal Serial Bus) pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoDecoder">
            <summary>
            Specifies a video decoder pin.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoEncoder">
            <summary>
            Specifies a video encoder pin.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoSCART">
            <summary>
            Specifies a SCART (Peritel) pin for video.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.VideoBlack">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.AudioTuner">
            <summary>
            Specifies a tuner pin for audio.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.AudioLine">
            <summary>
            Specifies a line pin for audio.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.AudioMic">
            <summary>
            Specifies a microphone pin.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.AudioAESDigital">
            <summary>
            Specifies an AES/EBU (Audio Engineering Society/European Broadcast Union) digital pin for audio.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.AudioSPDIFDigital">
            <summary>
            Specifies an S/PDIF (Sony/Philips Digital Interface Format) digital pin for audio.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.AudioSCSI">
            <summary>
            Specifies a SCSI pin for audio.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.AudioAUX">
            <summary>
            Specifies an AUX pin for audio.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.Audio1394">
            <summary>
            Specifies an IEEE 1394 pin for audio.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.AudioUSB">
            <summary>
            Specifies a USB pin for audio.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PhysicalConnectorType.AudioDecoder">
            <summary>
            Specifies an audio decoder pin.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PinCategory.Capture">
            <summary>
            Capture pin.
            </summary>
            
            <remarks>Equals to PIN_CATEGORY_CAPTURE.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.PinCategory.StillImage">
            <summary>
            Still image pin.
            </summary>
            
            <remarks>Equals to PIN_CATEGORY_STILL.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaType.Video">
            <summary>
            Video.
            </summary>
            
            <remarks>Equals to MEDIATYPE_Video.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaType.Interleaved">
            <summary>
            Interleaved. Used by Digital Video (DV).
            </summary>
            
            <remarks>Equals to MEDIATYPE_Interleaved.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaType.Audio">
            <summary>
            Audio.
            </summary>
            
            <remarks>Equals to MEDIATYPE_Audio.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaType.Text">
            <summary>
            Text.
            </summary>
            
            <remarks>Equals to MEDIATYPE_Text.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaType.Stream">
            <summary>
            Byte stream with no time stamps.
            </summary>
            
            <remarks>Equals to MEDIATYPE_Stream.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.YUYV">
            <summary>
            YUY2 (packed 4:2:2).
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_YUYV.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.IYUV">
            <summary>
            IYUV.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_IYUV.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.DVSD">
            <summary>
            A DV encoding format. (FOURCC 'DVSD')
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_DVSD.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.RGB1">
            <summary>
            RGB, 1 bit per pixel (bpp), palettized.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB1.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.RGB4">
            <summary>
            RGB, 4 bpp, palettized.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB4.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.RGB8">
            <summary>
            RGB, 8 bpp.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB8.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.RGB565">
            <summary>
            RGB 565, 16 bpp.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB565.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.RGB555">
            <summary>
            RGB 555, 16 bpp.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB555.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.RGB24">
            <summary>
            RGB, 24 bpp.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB24.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.RGB32">
            <summary>
            RGB, 32 bpp, no alpha channel.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB32.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.Avi">
            <summary>
            Data from AVI file.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_Avi.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.MediaSubType.Asf">
            <summary>
            Advanced Streaming Format (ASF).
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_Asf.</remarks>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.FindDirection.UpstreamOnly">
            <summary>Equals to LOOK_UPSTREAM_ONLY.</summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.FindDirection.DownstreamOnly">
            <summary>Equals to LOOK_DOWNSTREAM_ONLY.</summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.FormatType.VideoInfo">
            <summary>
            VideoInfo.
            </summary>
            <remarks>Equals to FORMAT_VideoInfo.</remarks>
        </member>
        <member name="F:TrulyRandom.DirectShow.FormatType.VideoInfo2">
            <summary>
            VideoInfo2.
            </summary>
            <remarks>Equals to FORMAT_VideoInfo2.</remarks>
        </member>
        <member name="P:TrulyRandom.DirectShow.FilterInfo.Name">
            <summary>
            Filter name.
            </summary>
        </member>
        <member name="P:TrulyRandom.DirectShow.FilterInfo.MonikerString">
            <summary>
            Filters's moniker string.
            </summary>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.FilterInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.DirectShow.FilterInfo"/> class.
            </summary>
            
            <param name="monikerString">Filters's moniker string.</param>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.FilterInfo.#ctor(System.Runtime.InteropServices.ComTypes.IMoniker)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.DirectShow.FilterInfo"/> class.
            </summary>
            
            <param name="moniker">Filter's moniker object.</param>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.FilterInfo.CompareTo(System.Object)">
            <summary>
            Compare the object with another instance of this class.
            </summary>
            
            <param name="value">Object to compare with.</param>
            
            <returns>A signed number indicating the relative values of this instance and <b>value</b>.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.FilterInfo.CreateFilter(System.String)">
            <summary>
            Create an instance of the filter.
            </summary>
            
            <param name="filterMoniker">Filter's moniker string.</param>
            
            <returns>Returns filter's object, which implements <b>IBaseFilter</b> interface.</returns>
            
            <remarks>The returned filter's object should be released using <b>Marshal.ReleaseComObject()</b>.</remarks>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.FilterInfoCollection.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.DirectShow.FilterInfoCollection"/> class.
            </summary>
            <param name="category">Guid of DirectShow filter category</param>
            <remarks>Build collection of filters' information objects for the
            specified filter category.</remarks>
            
        </member>
        <member name="P:TrulyRandom.DirectShow.FilterInfoCollection.Item(System.Int32)">
            <summary>
            Get filter information object.
            </summary>
            
            <param name="index">Index of filter information object to retrieve.</param>
            
            <returns>Filter information object.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.Grabber.SampleCB(System.Double,System.IntPtr)">
            <summary>
            Callback to receive samples
            </summary>
            <param name="sampleTime"></param>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:TrulyRandom.DirectShow.Grabber.BufferCB(System.Double,System.IntPtr,System.Int32)">
            <summary>
            Callback method that receives a pointer to the sample buffer
            </summary>
            <param name="sampleTime"></param>
            <param name="buffer"></param>
            <param name="bufferLen"></param>
            <returns></returns>
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMStreamConfig_Audio.SetFormat(TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Set the output format on the pin.
            </summary>
            
            <param name="mediaType">Media type to set.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMStreamConfig_Audio.GetFormat(TrulyRandom.DirectShow.AMMediaType@)">
            <summary>
            Retrieves the audio or video stream's format.
            </summary>
            
            <param name="mediaType">Retrieved media type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMStreamConfig_Audio.GetNumberOfCapabilities(System.Int32@,System.Int32@)">
            <summary>
            Retrieve the number of format capabilities that this pin supports.
            </summary>
            
            <param name="count">Variable that receives the number of format capabilities.</param>
            <param name="size">Variable that receives the size of the configuration structure in bytes.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMStreamConfig_Audio.GetStreamCaps(System.Int32,TrulyRandom.DirectShow.AMMediaType@,TrulyRandom.DirectShow.AudioStreamConfigCaps)">
            <summary>
            Retrieve a set of format capabilities.
            </summary>
            
            <param name="index">Specifies the format capability to retrieve, indexed from zero.</param>
            <param name="mediaType">Retrieved media type.</param>
            <param name="streamConfigCaps">Byte array, which receives information about capabilities.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMStreamConfig_Video.SetFormat(TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Set the output format on the pin.
            </summary>
            
            <param name="mediaType">Media type to set.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMStreamConfig_Video.GetFormat(TrulyRandom.DirectShow.AMMediaType@)">
            <summary>
            Retrieves the audio or video stream's format.
            </summary>
            
            <param name="mediaType">Retrieved media type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMStreamConfig_Video.GetNumberOfCapabilities(System.Int32@,System.Int32@)">
            <summary>
            Retrieve the number of format capabilities that this pin supports.
            </summary>
            
            <param name="count">Variable that receives the number of format capabilities.</param>
            <param name="size">Variable that receives the size of the configuration structure in bytes.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMStreamConfig_Video.GetStreamCaps(System.Int32,TrulyRandom.DirectShow.AMMediaType@,TrulyRandom.DirectShow.VideoStreamConfigCaps)">
            <summary>
            Retrieve a set of format capabilities.
            </summary>
            
            <param name="index">Specifies the format capability to retrieve, indexed from zero.</param>
            <param name="mediaType">Retrieved media type.</param>
            <param name="streamConfigCaps">Byte array, which receives information about capabilities.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMVideoControl.GetCaps(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.VideoControlFlags@)">
            <summary>
            Retrieves the capabilities of the underlying hardware
            </summary>
            
            <param name="pin">Pin to query capabilities from</param>
            <param name="flags">Get capabilities of the specified pin</param>
            
            <returns>Return's <b>HRESULT</b> error code</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMVideoControl.SetMode(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.VideoControlFlags)">
            <summary>
            Sets the video control mode of operation
            </summary>
            
            <param name="pin">The pin to set the video control mode on</param>
            <param name="mode">Value specifying a combination of the flags to set the video control mode</param>
            
            <returns>Return's <b>HRESULT</b> error code</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMVideoControl.GetMode(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.VideoControlFlags@)">
            <summary>
            Retrieves the video control mode of operation
            </summary>
            
            <param name="pin">The pin to retrieve the video control mode from</param>
            <param name="mode">Gets combination of flags, which specify the video control mode</param>
            
            <returns>Return's <b>HRESULT</b> error code</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMVideoControl.GetCurrentActualFrameRate(TrulyRandom.DirectShow.IPin,System.Int64@)">
            <summary>
            The method retrieves the actual frame rate, expressed as a frame duration in 100-nanosecond units.
            USB (Universal Serial Bus) and IEEE 1394 cameras may provide lower frame rates than requested
            because of bandwidth availability. This is only available during video streaming
            </summary>
            
            <param name="pin">The pin to retrieve the frame rate from</param>
            <param name="actualFrameRate">Gets frame rate in frame duration in 100-nanosecond units</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMVideoControl.GetMaxAvailableFrameRate(TrulyRandom.DirectShow.IPin,System.Int32,System.Drawing.Size,System.Int64@)">
            <summary>
            Retrieves the maximum frame rate currently available based on bus bandwidth usage for connections
            such as USB and IEEE 1394 camera devices where the maximum frame rate can be limited by bandwidth
            availability.
            </summary>
            
            <param name="pin">The pin to retrieve the maximum frame rate from</param>
            <param name="index">Index of the format to query for maximum frame rate</param>
            <param name="dimensions">Frame image size (width and height) in pixels</param>
            <param name="maxAvailableFrameRate">Gets maximum available frame rate. The frame rate is expressed as frame duration in 100-nanosecond units</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IAMVideoControl.GetFrameRateList(TrulyRandom.DirectShow.IPin,System.Int32,System.Drawing.Size,System.Int32@,System.IntPtr@)">
            <summary>
            Retrieves a list of available frame rates.
            </summary>
            
            <param name="pin">The pin to retrieve the maximum frame rate from</param>
            <param name="index">Index of the format to query for maximum frame rate</param>
            <param name="dimensions">Frame image size (width and height) in pixels</param>
            <param name="listSize">Number of elements in the list of frame rates</param>
            <param name="frameRate">Array of frame rates in 100-nanosecond units</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.GetClassID(System.Guid@)">
            <summary>
            Returns the class identifier (CLSID) for the component object.
            </summary>
            
            <param name="ClassID">Points to the location of the CLSID on return.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.Stop">
            <summary>
            Stops the filter.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.Pause">
            <summary>
            Pauses the filter.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.Run(System.Int64)">
            <summary>
            Runs the filter.
            </summary>
            
            <param name="start">Reference time corresponding to stream time 0.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.GetState(System.Int32,System.Int32@)">
            <summary>
            Retrieves the state of the filter (running, stopped, or paused).
            </summary>
            
            <param name="milliSecsTimeout">Time-out interval, in milliseconds.</param>
            <param name="filterState">Pointer to a variable that receives filter's state.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.SetSyncSource(System.IntPtr)">
            <summary>
            Sets the reference clock for the filter or the filter graph.
            </summary>
            
            <param name="clock">Pointer to the clock's <b>IReferenceClock</b> interface, or NULL. </param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.GetSyncSource(System.IntPtr@)">
            <summary>
            Retrieves the current reference clock.
            </summary>
            
            <param name="clock">Address of a variable that receives a pointer to the clock's IReferenceClock interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.EnumPins(TrulyRandom.DirectShow.IEnumPins@)">
            <summary>
            Enumerates the pins on this filter.
            </summary>
            
            <param name="enumPins">Address of a variable that receives a pointer to the IEnumPins interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.FindPin(System.String,TrulyRandom.DirectShow.IPin@)">
            <summary>
            Retrieves the pin with the specified identifier.
            </summary>
            
            <param name="id">Pointer to a constant wide-character string that identifies the pin.</param>
            <param name="pin">Address of a variable that receives a pointer to the pin's IPin interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.QueryFilterInfo(TrulyRandom.DirectShow.FilterInfo@)">
            <summary>
            Retrieves information about the filter.
            </summary>
            
            <param name="filterInfo">Pointer to <b>FilterInfo</b> structure.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.JoinFilterGraph(TrulyRandom.DirectShow.IFilterGraph,System.String)">
            <summary>
            Notifies the filter that it has joined or left the filter graph.
            </summary>
            
            <param name="graph">Pointer to the Filter Graph Manager's <b>IFilterGraph</b> interface, or NULL
            if the filter is leaving the graph.</param>
            <param name="name">String that specifies a name for the filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IBaseFilter.QueryVendorInfo(System.String@)">
            <summary>
            Retrieves a string containing vendor information.
            </summary>
            
            <param name="vendorInfo">Receives a string containing the vendor information.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ICaptureGraphBuilder2.SetFiltergraph(TrulyRandom.DirectShow.IGraphBuilder)">
            <summary>
            Specify filter graph for the capture graph builder to use.
            </summary>
            
            <param name="graphBuilder">Filter graph's interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ICaptureGraphBuilder2.GetFiltergraph(TrulyRandom.DirectShow.IGraphBuilder@)">
            <summary>
            Retrieve the filter graph that the builder is using.
            </summary>
            
            <param name="graphBuilder">Filter graph's interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ICaptureGraphBuilder2.SetOutputFileName(System.Guid,System.String,TrulyRandom.DirectShow.IBaseFilter@,System.IntPtr@)">
            <summary>
            Create file writing section of the filter graph.
            </summary>
            
            <param name="type">GUID that represents either the media subtype of the output or the
            class identifier (CLSID) of a multiplexer filter or file writer filter.</param>
            <param name="fileName">Output file name.</param>
            <param name="baseFilter">Receives the multiplexer's <see cref="T:TrulyRandom.DirectShow.IBaseFilter"/> interface.</param>
            <param name="fileSinkFilter">Receives the file writer's IFileSinkFilter interface. Can be NULL.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ICaptureGraphBuilder2.FindInterface(System.Guid,System.Guid,TrulyRandom.DirectShow.IBaseFilter,System.Guid,System.Object@)">
            <summary>
            Searche the graph for a specified interface, starting from a specified filter.
            </summary>
            
            <param name="category">GUID that specifies the search criteria.</param>
            <param name="type">GUID that specifies the major media type of an output pin, or NULL.</param>
            <param name="baseFilter"><see cref="T:TrulyRandom.DirectShow.IBaseFilter"/> interface of the filter. The method begins searching from this filter.</param>
            <param name="interfaceID">Interface identifier (IID) of the interface to locate.</param>
            <param name="retInterface">Receives found interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ICaptureGraphBuilder2.RenderStream(System.Guid,System.Guid,System.Object,TrulyRandom.DirectShow.IBaseFilter,TrulyRandom.DirectShow.IBaseFilter)">
            <summary>
            Connect an output pin on a source filter to a rendering filter, optionally through a compression filter.
            </summary>
            
            <param name="category">Pin category.</param>
            <param name="mediaType">Major-type GUID that specifies the media type of the output pin.</param>
            <param name="source">Starting filter for the connection.</param>
            <param name="compressor">Interface of an intermediate filter, such as a compression filter. Can be NULL.</param>
            <param name="renderer">Sink filter, such as a renderer or mux filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ICaptureGraphBuilder2.ControlStream(System.Guid,System.Guid,TrulyRandom.DirectShow.IBaseFilter,System.Int64,System.Int64,System.Int16,System.Int16)">
            <summary>
            Set the start and stop times for one or more streams of captured data.
            </summary>
            
            <param name="category">Pin category.</param>
            <param name="mediaType">Major-type GUID that specifies the media type.</param>
            <param name="filter"><see cref="T:TrulyRandom.DirectShow.IBaseFilter"/> interface that specifies which filter to control.</param>
            <param name="start">Start time.</param>
            <param name="stop">Stop time.</param>
            <param name="startCookie">Value that is sent as the second parameter of the
            EC_STREAM_CONTROL_STARTED event notification.</param>
            <param name="stopCookie">Value that is sent as the second parameter of the
            EC_STREAM_CONTROL_STOPPED event notification.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ICaptureGraphBuilder2.AllocCapFile(System.String,System.Int64)">
            <summary>
            Preallocate a capture file to a specified size.
            </summary>
            
            <param name="fileName">File name to create or resize.</param>
            <param name="size">Size of the file to allocate, in bytes.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ICaptureGraphBuilder2.CopyCaptureFile(System.String,System.String,System.Boolean,System.IntPtr)">
            <summary>
            Copy the valid media data from a capture file.
            </summary>
            
            <param name="oldFileName">Old file name.</param>
            <param name="newFileName">New file name.</param>
            <param name="allowEscAbort">Boolean value that specifies whether pressing the ESC key cancels the copy operation.</param>
            <param name="callback">IAMCopyCaptureFileProgress interface to display progress information, or NULL.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ICaptureGraphBuilder2.FindPin(System.Object,TrulyRandom.DirectShow.PinDirection,System.Guid,System.Guid,System.Boolean,System.Int32,TrulyRandom.DirectShow.IPin@)">
            <summary>
            
            </summary>
            
            <param name="source">Interface on a filter, or to an interface on a pin.</param>
            <param name="pinDirection">Pin direction (input or output).</param>
            <param name="category">Pin category.</param>
            <param name="mediaType">Media type.</param>
            <param name="unconnected">Boolean value that specifies whether the pin must be unconnected.</param>
            <param name="index">Zero-based index of the pin to retrieve, from the set of matching pins.</param>
            <param name="pin">Interface of the matching pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ICreateDevEnum.CreateClassEnumerator(System.Guid@,System.Runtime.InteropServices.ComTypes.IEnumMoniker@,System.Int32)">
            <summary>
            Creates a class enumerator for a specified device category.
            </summary>
            
            <param name="type">Specifies the class identifier of the device category.</param>
            <param name="enumMoniker">Address of a variable that receives an <b>IEnumMoniker</b> interface pointer</param>
            <param name="flags">Bitwise combination of zero or more flags. If zero, the method enumerates every filter in the category.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IEnumFilters.Next(System.Int32,TrulyRandom.DirectShow.IBaseFilter[],System.Int32@)">
            <summary>
            Retrieves the specified number of filters in the enumeration sequence.
            </summary>
            
            <param name="cFilters">Number of filters to retrieve.</param>
            <param name="filters">Array in which to place <see cref="T:TrulyRandom.DirectShow.IBaseFilter"/> interfaces.</param>
            <param name="filtersFetched">Actual number of filters placed in the array.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IEnumFilters.Skip(System.Int32)">
            <summary>
            Skips a specified number of filters in the enumeration sequence.
            </summary>
            
            <param name="cFilters">Number of filters to skip.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IEnumFilters.Reset">
            <summary>
            Resets the enumeration sequence to the beginning.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IEnumFilters.Clone(TrulyRandom.DirectShow.IEnumFilters@)">
            <summary>
            Makes a copy of the enumerator with the same enumeration state.
            </summary>
            
            <param name="enumFilters">Duplicate of the enumerator.</param>
            
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IEnumPins.Next(System.Int32,TrulyRandom.DirectShow.IPin[],System.Int32@)">
            <summary>
            Retrieves a specified number of pins.
            </summary>
            
            <param name="cPins">Number of pins to retrieve.</param>
            <param name="pins">Array of size <b>cPins</b> that is filled with <b>IPin</b> pointers.</param>
            <param name="pinsFetched">Receives the number of pins retrieved.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IEnumPins.Skip(System.Int32)">
            <summary>
            Skips a specified number of pins in the enumeration sequence.
            </summary>
            
            <param name="cPins">Number of pins to skip.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IEnumPins.Reset">
            <summary>
            Resets the enumeration sequence to the beginning.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IEnumPins.Clone(TrulyRandom.DirectShow.IEnumPins@)">
            <summary>
            Makes a copy of the enumerator with the same enumeration state. 
            </summary>
            
            <param name="enumPins">Duplicate of the enumerator.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph.AddFilter(TrulyRandom.DirectShow.IBaseFilter,System.String)">
            <summary>
            Adds a filter to the graph and gives it a name.
            </summary>
            
            <param name="filter">Filter to add to the graph.</param>
            <param name="name">Name of the filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph.RemoveFilter(TrulyRandom.DirectShow.IBaseFilter)">
            <summary>
            Removes a filter from the graph.
            </summary>
            
            <param name="filter">Filter to be removed from the graph.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph.EnumFilters(System.IntPtr@)">
            <summary>
            Provides an enumerator for all filters in the graph.
            </summary>
            
            <param name="enumerator">Filter enumerator.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph.FindFilterByName(System.String,TrulyRandom.DirectShow.IBaseFilter@)">
            <summary>
            Finds a filter that was added with a specified name.
            </summary>
            
            <param name="name">Name of filter to search for.</param>
            <param name="filter">Interface of found filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph.ConnectDirect(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Connects two pins directly (without intervening filters).
            </summary>
            
            <param name="pinOut">Output pin.</param>
            <param name="pinIn">Input pin.</param>
            <param name="mediaType">Media type to use for the connection.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph.Reconnect(TrulyRandom.DirectShow.IPin)">
            <summary>
            Breaks the existing pin connection and reconnects it to the same pin.
            </summary>
            
            <param name="pin">Pin to disconnect and reconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph.Disconnect(TrulyRandom.DirectShow.IPin)">
            <summary>
            Disconnects a specified pin.
            </summary>
            
            <param name="pin">Pin to disconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph.SetDefaultSyncSource">
            <summary>
            Sets the reference clock to the default clock.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.AddFilter(TrulyRandom.DirectShow.IBaseFilter,System.String)">
            <summary>
            Adds a filter to the graph and gives it a name.
            </summary>
            
            <param name="filter">Filter to add to the graph.</param>
            <param name="name">Name of the filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.RemoveFilter(TrulyRandom.DirectShow.IBaseFilter)">
            <summary>
            Removes a filter from the graph.
            </summary>
            
            <param name="filter">Filter to be removed from the graph.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.EnumFilters(TrulyRandom.DirectShow.IEnumFilters@)">
            <summary>
            Provides an enumerator for all filters in the graph.
            </summary>
            
            <param name="enumerator">Filter enumerator.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.FindFilterByName(System.String,TrulyRandom.DirectShow.IBaseFilter@)">
            <summary>
            Finds a filter that was added with a specified name.
            </summary>
            
            <param name="name">Name of filter to search for.</param>
            <param name="filter">Interface of found filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.ConnectDirect(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Connects two pins directly (without intervening filters).
            </summary>
            
            <param name="pinOut">Output pin.</param>
            <param name="pinIn">Input pin.</param>
            <param name="mediaType">Media type to use for the connection.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.Reconnect(TrulyRandom.DirectShow.IPin)">
            <summary>
            Breaks the existing pin connection and reconnects it to the same pin.
            </summary>
            
            <param name="pin">Pin to disconnect and reconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.Disconnect(TrulyRandom.DirectShow.IPin)">
            <summary>
            Disconnects a specified pin.
            </summary>
            
            <param name="pin">Pin to disconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.SetDefaultSyncSource">
            <summary>
            Sets the reference clock to the default clock.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.Connect(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.IPin)">
            <summary>
            Connects two pins. If they will not connect directly, this method connects them with intervening transforms.
            </summary>
            
            <param name="pinOut">Output pin.</param>
            <param name="pinIn">Input pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.Render(TrulyRandom.DirectShow.IPin)">
            <summary>
            Adds a chain of filters to a specified output pin to render it.
            </summary>
            
            <param name="pinOut">Output pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.RenderFile(System.String,System.String)">
            <summary>
            Builds a filter graph that renders the specified file.
            </summary>
            
            <param name="file">Specifies a string that contains file name or device moniker.</param>
            <param name="playList">Reserved.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.AddSourceFilter(System.String,System.String,TrulyRandom.DirectShow.IBaseFilter@)">
            <summary>
            Adds a source filter to the filter graph for a specific file.
            </summary>
            
            <param name="fileName">Specifies the name of the file to load.</param>
            <param name="filterName">Specifies a name for the source filter.</param>
            <param name="filter">Variable that receives the interface of the source filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.SetLogFile(System.IntPtr)">
            <summary>
            Sets the file for logging actions taken when attempting to perform an operation.
            </summary>
            
            <param name="hFile">Handle to the log file.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.Abort">
            <summary>
            Requests that the graph builder return as soon as possible from its current task.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.ShouldOperationContinue">
            <summary>
            Queries whether the current operation should continue.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.AddSourceFilterForMoniker(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IBindCtx,System.String,TrulyRandom.DirectShow.IBaseFilter@)">
            <summary>
            
            </summary>
            
            <param name="moniker">Moniker interface.</param>
            <param name="bindContext">Bind context interface.</param>
            <param name="filterName">Name for the filter.</param>
            <param name="filter"> Receives source filter's IBaseFilter interface.
            The caller must release the interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.ReconnectEx(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Breaks the existing pin connection and reconnects it to the same pin,
            using a specified media type.
            </summary>
            
            <param name="pin">Pin to disconnect and reconnect.</param>
            <param name="mediaType">Media type to reconnect with.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IFilterGraph2.RenderEx(TrulyRandom.DirectShow.IPin,System.Int32,System.IntPtr)">
            <summary>
            Render an output pin, with an option to use existing renderers only.
            </summary>
            
            <param name="outputPin">Interface of the output pin.</param>
            <param name="flags">Flag that specifies how to render the pin.</param>
            <param name="context">Reserved.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.AddFilter(TrulyRandom.DirectShow.IBaseFilter,System.String)">
            <summary>
            Adds a filter to the graph and gives it a name.
            </summary>
            
            <param name="filter">Filter to add to the graph.</param>
            <param name="name">Name of the filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.RemoveFilter(TrulyRandom.DirectShow.IBaseFilter)">
            <summary>
            Removes a filter from the graph.
            </summary>
            
            <param name="filter">Filter to be removed from the graph.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.EnumFilters(TrulyRandom.DirectShow.IEnumFilters@)">
            <summary>
            Provides an enumerator for all filters in the graph.
            </summary>
            
            <param name="enumerator">Filter enumerator.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.FindFilterByName(System.String,TrulyRandom.DirectShow.IBaseFilter@)">
            <summary>
            Finds a filter that was added with a specified name.
            </summary>
            
            <param name="name">Name of filter to search for.</param>
            <param name="filter">Interface of found filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.ConnectDirect(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Connects two pins directly (without intervening filters).
            </summary>
            
            <param name="pinOut">Output pin.</param>
            <param name="pinIn">Input pin.</param>
            <param name="mediaType">Media type to use for the connection.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.Reconnect(TrulyRandom.DirectShow.IPin)">
            <summary>
            Breaks the existing pin connection and reconnects it to the same pin.
            </summary>
            
            <param name="pin">Pin to disconnect and reconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.Disconnect(TrulyRandom.DirectShow.IPin)">
            <summary>
            Disconnects a specified pin.
            </summary>
            
            <param name="pin">Pin to disconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.SetDefaultSyncSource">
            <summary>
            Sets the reference clock to the default clock.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.Connect(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.IPin)">
            <summary>
            Connects two pins. If they will not connect directly, this method connects them with intervening transforms.
            </summary>
            
            <param name="pinOut">Output pin.</param>
            <param name="pinIn">Input pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.Render(TrulyRandom.DirectShow.IPin)">
            <summary>
            Adds a chain of filters to a specified output pin to render it.
            </summary>
            
            <param name="pinOut">Output pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.RenderFile(System.String,System.String)">
            <summary>
            Builds a filter graph that renders the specified file.
            </summary>
            
            <param name="file">Specifies a string that contains file name or device moniker.</param>
            <param name="playList">Reserved.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.AddSourceFilter(System.String,System.String,TrulyRandom.DirectShow.IBaseFilter@)">
            <summary>
            Adds a source filter to the filter graph for a specific file.
            </summary>
            
            <param name="fileName">Specifies the name of the file to load.</param>
            <param name="filterName">Specifies a name for the source filter.</param>
            <param name="filter">Variable that receives the interface of the source filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.SetLogFile(System.IntPtr)">
            <summary>
            Sets the file for logging actions taken when attempting to perform an operation.
            </summary>
            
            <param name="hFile">Handle to the log file.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.Abort">
            <summary>
            Requests that the graph builder return as soon as possible from its current task.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IGraphBuilder.ShouldOperationContinue">
            <summary>
            Queries whether the current operation should continue.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaControl.Run">
            <summary>
            Runs all the filters in the filter graph.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaControl.Pause">
            <summary>
            Pauses all filters in the filter graph.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaControl.Stop">
            <summary>
            Stops all the filters in the filter graph.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaControl.GetState(System.Int32,System.Int32@)">
            <summary>
            Retrieves the state of the filter graph.
            </summary>
            
            <param name="timeout">Duration of the time-out, in milliseconds, or INFINITE to specify an infinite time-out.</param>
            <param name="filterState">Мariable that receives a member of the <b>FILTER_STATE</b> enumeration.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaControl.RenderFile(System.String)">
            <summary>
            Builds a filter graph that renders the specified file.
            </summary>
            
            <param name="fileName">Name of the file to render</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaControl.AddSourceFilter(System.String,System.Object@)">
            <summary>
            Adds a source filter to the filter graph, for a specified file.
            </summary>
            
            <param name="fileName">Name of the file containing the source video.</param>
            <param name="filterInfo">Receives interface of filter information object.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaControl.get_FilterCollection(System.Object@)">
            <summary>
            Retrieves a collection of the filters in the filter graph.
            </summary>
            
            <param name="collection">Receives the <b>IAMCollection</b> interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaControl.get_RegFilterCollection(System.Object@)">
            <summary>
            Retrieves a collection of all the filters listed in the registry.
            </summary>
            
            <param name="collection">Receives the <b>IDispatch</b> interface of <b>IAMCollection</b> object.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaControl.StopWhenReady">
            <summary>
            Pauses the filter graph, allowing filters to queue data, and then stops the filter graph.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaEventEx.GetEventHandle(System.IntPtr@)">
            <summary>
            Retrieves a handle to a manual-reset event that remains signaled while the queue contains event notifications.
            </summary>
            <param name="hEvent">Pointer to a variable that receives the event handle.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaEventEx.GetEvent(TrulyRandom.DirectShow.DsEvCode@,System.IntPtr@,System.IntPtr@,System.Int32)">
            <summary>
            Retrieves the next event notification from the event queue.
            </summary>
            
            <param name="lEventCode">Variable that receives the event code.</param>
            <param name="lParam1">Pointer to a variable that receives the first event parameter.</param>
            <param name="lParam2">Pointer to a variable that receives the second event parameter.</param>
            <param name="msTimeout">Time-out interval, in milliseconds.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaEventEx.WaitForCompletion(System.Int32,System.Int32@)">
            <summary>
            Waits for the filter graph to render all available data.
            </summary>
            
            <param name="msTimeout">Time-out interval, in milliseconds. Pass zero to return immediately.</param>
            <param name="pEvCode">Pointer to a variable that receives an event code.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaEventEx.CancelDefaultHandling(System.Int32)">
            <summary>
            Cancels the Filter Graph Manager's default handling for a specified event.
            </summary>
            
            <param name="lEvCode">Event code for which to cancel default handling.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaEventEx.RestoreDefaultHandling(System.Int32)">
            <summary>
            Restores the Filter Graph Manager's default handling for a specified event.
            </summary>
            <param name="lEvCode">Event code for which to restore default handling.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaEventEx.FreeEventParams(TrulyRandom.DirectShow.DsEvCode,System.IntPtr,System.IntPtr)">
            <summary>
            Frees resources associated with the parameters of an event.
            </summary>
            <param name="lEvCode">Event code.</param>
            <param name="lParam1">First event parameter.</param>
            <param name="lParam2">Second event parameter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaEventEx.SetNotifyWindow(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Registers a window to process event notifications.
            </summary>
            
            <param name="hwnd">Handle to the window, or <see cref="F:System.IntPtr.Zero"/> to stop receiving event messages.</param>
            <param name="lMsg">Window message to be passed as the notification.</param>
            <param name="lInstanceData">Value to be passed as the <i>lParam</i> parameter for the <i>lMsg</i> message.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaEventEx.SetNotifyFlags(System.Int32)">
            <summary>
            Enables or disables event notifications.
            </summary>
            
            <param name="lNoNotifyFlags">Value indicating whether to enable or disable event notifications.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IMediaEventEx.GetNotifyFlags(System.Int32@)">
            <summary>
            Determines whether event notifications are enabled.
            </summary>
            
            <param name="lplNoNotifyFlags">Variable that receives current notification status.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.Connect(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Connects the pin to another pin.
            </summary>
            
            <param name="receivePin">Other pin to connect to.</param>
            <param name="mediaType">Type to use for the connections (optional).</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.ReceiveConnection(TrulyRandom.DirectShow.IPin,TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Makes a connection to this pin and is called by a connecting pin.
            </summary>
            
            <param name="receivePin">Connecting pin.</param>
            <param name="mediaType">Media type of the samples to be streamed.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.Disconnect">
            <summary>
            Breaks the current pin connection.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.ConnectedTo(TrulyRandom.DirectShow.IPin@)">
            <summary>
            Returns a pointer to the connecting pin.
            </summary>
            
            <param name="pin">Receives <b>IPin</b> interface of connected pin (if any).</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.ConnectionMediaType(TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Returns the media type of this pin's connection.
            </summary>
            
            <param name="mediaType">Pointer to an <see cref="T:TrulyRandom.DirectShow.AMMediaType"/> structure. If the pin is connected,
            the media type is returned. Otherwise, the structure is initialized to a default state in which
            all elements are 0, with the exception of <b>lSampleSize</b>, which is set to 1, and
            <b>FixedSizeSamples</b>, which is set to <b>true</b>.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.QueryPinInfo(TrulyRandom.DirectShow.PinInfo@)">
            <summary>
            Retrieves information about this pin (for example, the name, owning filter, and direction).
            </summary>
            
            <param name="pinInfo"><see cref="T:TrulyRandom.DirectShow.PinInfo"/> structure that receives the pin information.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.QueryDirection(TrulyRandom.DirectShow.PinDirection@)">
            <summary>
            Retrieves the direction for this pin.
            </summary>
            
            <param name="pinDirection">Receives direction of the pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.QueryId(System.String@)">
            <summary>
            Retrieves an identifier for the pin.
            </summary>
            
            <param name="id">Pin identifier.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.QueryAccept(TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Queries whether a given media type is acceptable by the pin.
            </summary>
            
            <param name="mediaType"><see cref="T:TrulyRandom.DirectShow.AMMediaType"/> structure that specifies the media type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.EnumMediaTypes(System.IntPtr)">
            <summary>
            Provides an enumerator for this pin's preferred media types.
            </summary>
            
            <param name="enumerator">Address of a variable that receives a pointer to the <b>IEnumMediaTypes</b> interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.QueryInternalConnections(System.IntPtr,System.Int32@)">
            <summary>
            Provides an array of the pins to which this pin internally connects.
            </summary>
            
            <param name="apPin">Address of an array of <b>IPin</b> pointers.</param>
            <param name="nPin">On input, specifies the size of the array. When the method returns,
            the value is set to the number of pointers returned in the array.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.EndOfStream">
            <summary>
            Notifies the pin that no additional data is expected.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.BeginFlush">
            <summary>
            Begins a flush operation.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.EndFlush">
            <summary>
            Ends a flush operation.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPin.NewSegment(System.Int64,System.Int64,System.Double)">
            <summary>
            Specifies that samples following this call are grouped as a segment with a given start time, stop time, and rate.
            </summary>
            
            <param name="start">Start time of the segment, relative to the original source, in 100-nanosecond units.</param>
            <param name="stop">End time of the segment, relative to the original source, in 100-nanosecond units.</param>
            <param name="rate">Rate at which this segment should be processed, as a percentage of the original rate.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPropertyBag.Read(System.String,System.Object@,System.IntPtr)">
            <summary>
            Read a property from property bag.
            </summary>
            
            <param name="propertyName">Property name to read.</param>
            <param name="pVar">Property value.</param>
            <param name="pErrorLog">Caller's error log.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.IPropertyBag.Write(System.String,System.Object@)">
            <summary>
            Write property to property bag.
            </summary>
            
            <param name="propertyName">Property name to read.</param>
            <param name="pVar">Property value.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ISampleGrabber.SetOneShot(System.Boolean)">
            <summary>
            Specifies whether the filter should stop the graph after receiving one sample.
            </summary>
            
            <param name="oneShot">Boolean value specifying whether the filter should stop the graph after receiving one sample.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ISampleGrabber.SetMediaType(TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Specifies the media type for the connection on the Sample Grabber's input pin.
            </summary>
            
            <param name="mediaType">Specifies the required media type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ISampleGrabber.GetConnectedMediaType(TrulyRandom.DirectShow.AMMediaType)">
            <summary>
            Retrieves the media type for the connection on the Sample Grabber's input pin.
            </summary>
            
            <param name="mediaType"><see cref="T:TrulyRandom.DirectShow.AMMediaType"/> structure, which receives media type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ISampleGrabber.SetBufferSamples(System.Boolean)">
            <summary>
            Specifies whether to copy sample data into a buffer as it goes through the filter.
            </summary>
            
            <param name="bufferThem">Boolean value specifying whether to buffer sample data.
            If <b>true</b>, the filter copies sample data into an internal buffer.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ISampleGrabber.GetCurrentBuffer(System.Int32@,System.IntPtr)">
            <summary>
            Retrieves a copy of the sample that the filter received most recently.
            </summary>
            
            <param name="bufferSize">Pointer to the size of the buffer. If pBuffer is NULL, this parameter receives the required size.</param>
            <param name="buffer">Pointer to a buffer to receive a copy of the sample, or NULL.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ISampleGrabber.GetCurrentSample(System.IntPtr)">
            <summary>
            Not currently implemented.
            </summary>
            
            <param name="sample"></param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ISampleGrabber.SetCallback(TrulyRandom.DirectShow.ISampleGrabberCB,System.Int32)">
            <summary>
            Specifies a callback method to call on incoming samples.
            </summary>
            
            <param name="callback"><see cref="T:TrulyRandom.DirectShow.ISampleGrabberCB"/> interface containing the callback method, or NULL to cancel the callback.</param>
            <param name="whichMethodToCallback">Index specifying the callback method.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ISampleGrabberCB.SampleCB(System.Double,System.IntPtr)">
            <summary>
            Callback method that receives a pointer to the media sample.
            </summary>
            
            <param name="sampleTime">Starting time of the sample, in seconds.</param>
            <param name="sample">Pointer to the sample's <b>IMediaSample</b> interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.ISampleGrabberCB.BufferCB(System.Double,System.IntPtr,System.Int32)">
            <summary>
            Callback method that receives a pointer to the sample bufferю
            </summary>
            
            <param name="sampleTime">Starting time of the sample, in seconds.</param>
            <param name="buffer">Pointer to a buffer that contains the sample data.</param>
            <param name="bufferLen">Length of the buffer pointed to by <b>buffer</b>, in bytes</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.Win32.CreateBindCtx(System.Int32,System.Runtime.InteropServices.ComTypes.IBindCtx@)">
            <summary>
            Supplies a pointer to an implementation of <b>IBindCtx</b> (a bind context object).
            This object stores information about a particular moniker-binding operation.
            </summary>
            
            <param name="reserved">Reserved for future use; must be zero.</param>
            <param name="ppbc">Address of <b>IBindCtx*</b> pointer variable that receives the
            interface pointer to the new bind context object.</param>
            
            <returns>Returns <b>S_OK</b> on success.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.Win32.MkParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
            <summary>
            Converts a string into a moniker that identifies the object named by the string.
            </summary>
            
            <param name="pbc">Pointer to the IBindCtx interface on the bind context object to be used in this binding operation.</param>
            <param name="szUserName">Pointer to a zero-terminated wide character string containing the display name to be parsed. </param>
            <param name="pchEaten">Pointer to the number of characters of szUserName that were consumed.</param>
            <param name="ppmk">Address of <b>IMoniker*</b> pointer variable that receives the interface pointer
            to the moniker that was built from <b>szUserName</b>.</param>
            
            <returns>Returns <b>S_OK</b> on success.</returns>
            
        </member>
        <member name="M:TrulyRandom.DirectShow.Win32.OleCreatePropertyFrame(System.IntPtr,System.Int32,System.Int32,System.String,System.Int32,System.Object@,System.Int32,System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Invokes a new property frame, that is, a property sheet dialog box.
            </summary>
            
            <param name="hwndOwner">Parent window of property sheet dialog box.</param>
            <param name="x">Horizontal position for dialog box.</param>
            <param name="y">Vertical position for dialog box.</param>
            <param name="caption">Dialog box caption.</param>
            <param name="cObjects">Number of object pointers in <b>ppUnk</b>.</param>
            <param name="ppUnk">Pointer to the objects for property sheet.</param>
            <param name="cPages">Number of property pages in <b>lpPageClsID</b>.</param>
            <param name="lpPageClsID">Array of CLSIDs for each property page.</param>
            <param name="lcid">Locale identifier for property sheet locale.</param>
            <param name="dwReserved">Reserved.</param>
            <param name="lpvReserved">Reserved.</param>
            
            <returns>Returns <b>S_OK</b> on success.</returns>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.AMMediaType.MajorType">
            <summary>
            Globally unique identifier (GUID) that specifies the major type of the media sample.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.AMMediaType.SubType">
            <summary>
            GUID that specifies the subtype of the media sample.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.AMMediaType.FixedSizeSamples">
            <summary>
            If <b>true</b>, samples are of a fixed size.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.AMMediaType.TemporalCompression">
            <summary>
            If <b>true</b>, samples are compressed using temporal (interframe) compression.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.AMMediaType.SampleSize">
            <summary>
            Size of the sample in bytes. For compressed data, the value can be zero.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.AMMediaType.FormatType">
            <summary>
            GUID that specifies the structure used for the format block.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.AMMediaType.unkPtr">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.AMMediaType.FormatSize">
            <summary>
            Size of the format block, in bytes.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.AMMediaType.FormatPtr">
            <summary>
            Pointer to the format block.
            </summary>
        </member>
        <member name="M:TrulyRandom.DirectShow.AMMediaType.Finalize">
            <summary>
            Destroys the instance of the <see cref="T:TrulyRandom.DirectShow.AMMediaType"/> class.
            </summary>
        </member>
        <member name="M:TrulyRandom.DirectShow.AMMediaType.Dispose">
            <summary>
            Dispose the object.
            </summary>
        </member>
        <member name="M:TrulyRandom.DirectShow.AMMediaType.Dispose(System.Boolean)">
            <summary>
            Dispose the object
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="F:TrulyRandom.DirectShow.PinInfo.Filter">
            <summary>
            Owning filter.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PinInfo.Direction">
            <summary>
            Direction of the pin.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.PinInfo.Name">
            <summary>
            Name of the pin.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.RECT.Left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.RECT.Top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle. 
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.RECT.Right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.RECT.Bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.Size">
            <summary>
            Specifies the number of bytes required by the structure.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.Width">
            <summary>
            Specifies the width of the bitmap.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.Height">
            <summary>
            Specifies the height of the bitmap, in pixels.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.Planes">
            <summary>
            Specifies the number of planes for the target device. This value must be set to 1.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.BitCount">
            <summary>
            Specifies the number of bits per pixel.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.Compression">
            <summary>
            If the bitmap is compressed, this member is a <b>FOURCC</b> the specifies the compression.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.ImageSize">
            <summary>
            Specifies the size, in bytes, of the image.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.XPelsPerMeter">
            <summary>
            Specifies the horizontal resolution, in pixels per meter, of the target device for the bitmap.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.YPelsPerMeter">
            <summary>
            Specifies the vertical resolution, in pixels per meter, of the target device for the bitmap.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.ColorsUsed">
            <summary>
            Specifies the number of color indices in the color table that are actually used by the bitmap.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.BitmapInfoHeader.ColorsImportant">
            <summary>
            Specifies the number of color indices that are considered important for displaying the bitmap.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader.SrcRect">
            <summary>
            <see cref="T:TrulyRandom.DirectShow.RECT"/> structure that specifies the source video window.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader.TargetRect">
            <summary>
            <see cref="T:TrulyRandom.DirectShow.RECT"/> structure that specifies the destination video window.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader.BitRate">
            <summary>
            Approximate data rate of the video stream, in bits per second.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader.BitErrorRate">
            <summary>
            Data error rate, in bit errors per second.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader.AverageTimePerFrame">
            <summary>
            The desired average display time of the video frames, in 100-nanosecond units.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader.BmiHeader">
            <summary>
            <see cref="T:TrulyRandom.DirectShow.BitmapInfoHeader"/> structure that contains color and dimension information for the video image bitmap.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.SrcRect">
            <summary>
            <see cref="T:TrulyRandom.DirectShow.RECT"/> structure that specifies the source video window.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.TargetRect">
            <summary>
            <see cref="T:TrulyRandom.DirectShow.RECT"/> structure that specifies the destination video window.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.BitRate">
            <summary>
            Approximate data rate of the video stream, in bits per second.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.BitErrorRate">
            <summary>
            Data error rate, in bit errors per second.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.AverageTimePerFrame">
            <summary>
            The desired average display time of the video frames, in 100-nanosecond units.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.InterlaceFlags">
            <summary>
            Flags that specify how the video is interlaced.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.CopyProtectFlags">
            <summary>
            Flag set to indicate that the duplication of the stream should be restricted.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.PictAspectRatioX">
            <summary>
            The X dimension of picture aspect ratio.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.PictAspectRatioY">
            <summary>
            The Y dimension of picture aspect ratio.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.Reserved1">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.Reserved2">
            <summary>
            Reserved for future use. 
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoInfoHeader2.BmiHeader">
            <summary>
            <see cref="T:TrulyRandom.DirectShow.BitmapInfoHeader"/> structure that contains color and dimension information for the video image bitmap.
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoCapabilities.FrameSize">
            <summary>
            Frame size supported by video device
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoCapabilities.AverageFrameRate">
            <summary>
            Average frame rate of video device for corresponding <see cref="F:TrulyRandom.DirectShow.VideoCapabilities.FrameSize">frame size</see>
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoCapabilities.MaximumFrameRate">
            <summary>
            Maximum frame rate of video device for corresponding <see cref="F:TrulyRandom.DirectShow.VideoCapabilities.FrameSize">frame size</see>
            </summary>
        </member>
        <member name="F:TrulyRandom.DirectShow.VideoCapabilities.BitCount">
            <summary>
            Number of bits per pixel provided by the camera
            </summary>
        </member>
        <member name="M:TrulyRandom.DirectShow.VideoCapabilities.FromStreamConfig(TrulyRandom.DirectShow.IAMStreamConfig_Video)">
            <summary>
            Retrieves capabilities of a video device
            </summary>
            <param name="videoStreamConfig"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TrulyRandom.DirectShow.VideoCapabilities.#ctor(TrulyRandom.DirectShow.IAMStreamConfig_Video,System.Int32)">
            <summary>
            Retrieves capabilities of a video device
            </summary>
            <param name="videoStreamConfig"></param>
            <param name="index"></param>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:TrulyRandom.DirectShow.VideoCapabilities.Equals(System.Object)">
            <summary>
            Check if the video capability equals to the specified object
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>Returns true if both are equal are equal or false otherwise</returns>
        </member>
        <member name="M:TrulyRandom.DirectShow.VideoCapabilities.Equals(TrulyRandom.DirectShow.VideoCapabilities)">
            <summary>
            Check if two video capabilities are equal
            </summary>
            <param name="vc2">Second video capability to compare with</param>
            <returns>Returns true if both video capabilities are equal or false otherwise</returns>
        </member>
        <member name="M:TrulyRandom.DirectShow.VideoCapabilities.GetHashCode">
            <summary>
            Get hash code of the object
            </summary>
            <returns>Returns hash code ot the object</returns>
        </member>
        <member name="M:TrulyRandom.DirectShow.VideoCapabilities.op_Equality(TrulyRandom.DirectShow.VideoCapabilities,TrulyRandom.DirectShow.VideoCapabilities)">
            <summary>
            Equality operator
            </summary>
            <param name="a">First object to check</param>
            <param name="b">Seconds object to check</param>
            <returns>Return true if both objects are equal or false otherwise</returns>
        </member>
        <member name="M:TrulyRandom.DirectShow.VideoCapabilities.op_Inequality(TrulyRandom.DirectShow.VideoCapabilities,TrulyRandom.DirectShow.VideoCapabilities)">
            <summary>
            Inequality operator
            </summary>
            <param name="a">First object to check</param>
            <param name="b">Seconds object to check</param>
            <returns>Return true if both objects are not equal or false otherwise</returns>
        </member>
        <member name="T:TrulyRandom.Models.Extractor">
            <summary>
            Base class for all extractors - modules that read data from other modules (sources or other extractors) and maximizes its entropy, removes dependencies, etc
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.ActualCompression">
            <summary>
            Shows how much is data compressed by this extractor
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.Sources">
            <summary>
            Sources of data for this extractor
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.MixDataFromDifferentSources">
            <summary>
            Determines whether data block should be taken from all available sources and concatenated (<c>true</c>), or from one source if possible (<c>false</c>)
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.NoDataToProcess">
            <summary>
            Shows if extractor is idle due to lack of data in its sources
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.TotalBytesConsumed">
            <summary>
            Total amount of bytes read by this extractor from its sources
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.UseDefaultCompressionCalculator">
            <summary>
            Determines whether child class uses default compression calculator, or its own
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.Seedable">
            <summary>
            Determines whether child class implements <see cref="T:TrulyRandom.Models.ISeedable"/> interface and can be seeded
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.BatchSize">
            <summary>
            Number of bytes read from sources and processed at once
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Extractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.Models.Extractor" /> class
            </summary>
        </member>
        <member name="F:TrulyRandom.Models.Extractor.history">
            <summary>
            Processed block history
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Extractor.WorkerThread">
            <summary>
            Main thread
            </summary>
        </member>
        <member name="F:TrulyRandom.Models.Extractor.seedSource">
            <summary>
            Source of seed data. It is recommended to use high-quality entropy from the end of a chain
            </summary>
        </member>
        <member name="F:TrulyRandom.Models.Extractor.seed">
            <summary>
            Seed data
            </summary>
        </member>
        <member name="F:TrulyRandom.Models.Extractor.seedLength">
            <summary>
            Length of the seed
            </summary>
        </member>
        <member name="F:TrulyRandom.Models.Extractor.seedRotationInterval">
            <summary>
            Number of input bytes after which seed will be rotated
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Extractor.RotateSeed(System.Boolean)">
            <summary>
            Checks if seed should be rotated and rotates if so
            </summary>
            <param name="force">Force rotate the seed</param>
        </member>
        <member name="M:TrulyRandom.Models.Extractor.BPSCalculation">
            <summary>
            Calculates bytes per second output of this extractor
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Extractor.ProcessData(System.Byte[])">
            <summary>
            Method containing logic for data processing algorithm
            </summary>
            <param name="data">Data to be processed</param>
            <returns>Processed data</returns>
        </member>
        <member name="M:TrulyRandom.Models.Extractor.AddSource(TrulyRandom.Models.Module)">
            <summary>
            Adds source to read data from
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:TrulyRandom.Models.Extractor.RemoveSource(TrulyRandom.Models.Module)">
            <summary>
            Removes source from the list
            </summary>
            <param name="source">Source to be removed</param>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.DynamicallyAdjustCompression">
            <summary>
            Determines whether compression should be adjusted depending on how full is the buffer of the <see cref="P:TrulyRandom.Models.Extractor.DynamicCoefficientSource"/> module
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.DynamicCoefficientSource">
            <summary>
            Module which determines <see cref="P:TrulyRandom.Models.Extractor.DynamicCoefficient"/>
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Extractor.DynamicCoefficient">
            <summary>
            Current dynamic coefficient
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Extractor.GetActualBatchSize">
            <summary>
            Determines the current size of the batch
            </summary>
            <returns></returns>
        </member>
        <member name="M:TrulyRandom.Models.Extractor.ReadDataFromSources(System.Int32)">
            <summary>
            Reads data from sources
            </summary>
            <param name="count">Number of bytes to read</param>
            <returns>Data read</returns>
        </member>
        <member name="T:TrulyRandom.Models.ISeedable">
            <summary>
            Provides methods for seeding extractors: its security increases when supplied with a small amount of high-quality entropy
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.ISeedable.SeedLength">
            <summary>
            Length of the seed
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.ISeedable.SeedRotationInterval">
            <summary>
            Number of input bytes after which seed will be rotated
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.ISeedable.SeedSource">
            <summary>
            Source of seed data. It is recommended to use high-quality entropy from the end of a chain
            </summary>
        </member>
        <member name="T:TrulyRandom.Models.Module">
            <summary>
            Base class for all modules in the graph
            </summary>
        </member>
        <member name="F:TrulyRandom.Models.Module.thread">
            <summary>
            Main thread
            </summary>
        </member>
        <member name="F:TrulyRandom.Models.Module.pauseOnOverflow">
            <summary>
            Determines whether source should be paused when buffer is full
            </summary>
        </member>
        <member name="F:TrulyRandom.Models.Module.overflowHysteresis">
            <summary>
            If source was paused due to overflow and amount of data in the buffer is lower then this threshold - it will be unpaused
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.Overflow">
            <summary>
            Shows whether module buffer is full
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.Name">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.DataSource">
            <summary>
            A <see cref="T:TrulyRandom.DataSource"/>  object assigned to this module. It provides method for end-user to retrieve random data of various types 
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.Sync">
            <summary>
            Object for locking access to read methods
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.BufferSize">
            <summary>
            Maximum size of the output buffer
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.BytesInBuffer">
            <summary>
            Amount of bytes currently in the output buffer
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.BufferState">
            <summary>
            Proportion of the output buffer currently occupied
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.TotalBytesGenerated">
            <summary>
            Total amount of bytes written to the output buffer
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.BytesPerSecond">
            <summary>
            Current generation or processing rate in bytes per second, calculated only during periods of activity
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.BytesPerSecondInclPause">
            <summary>
            Current generation or processing rate in bytes per second, calculated during both periods of activity and inactivity
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.Started">
            <summary>
            Determines whether this module is started
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.CalculateEntropy">
            <summary>
            Determines whether entropy of the last data generated should be calculated
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.CalculateBPS">
            <summary>
            Determines whether BPS (bytes per second) should be calculated
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.Entropy">
            <summary>
            Entropy of the last data generated
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.Models.Module" /> class
            </summary>
        </member>
        <member name="T:TrulyRandom.Models.Module.Interval">
            <summary>
            Represents time interval
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.EntropyCalculation">
            <summary>
            Calculates the entropy of the last data generated
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.ForceRefreshEntropy">
            <summary>
            Forces immediate entropy calculation
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.BPSCalculation">
            <summary>
            Defines the default method to calculate BPS
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.PeriodicalActivity">
            <summary>
            Provides the possibility to run some code periodically
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.ReadExactly(System.Int32)">
            <summary>
            Reads exactly <c>count</c> bytes from the output buffer. If there is insufficient data in the buffer, empty array will be returned
            </summary>
            <param name="count">Number of bytes to be read</param>
            <returns>Data from the output buffer</returns>
        </member>
        <member name="M:TrulyRandom.Models.Module.ReadAtLeast(System.Int32)">
            <summary>
            Reads all data from the output buffer, but no less than <c>count</c> bytes. Otherwise, empty array will be returned
            </summary>
            <param name="count">Number of bytes to be read</param>
            <returns>Data from the output buffer</returns>
        </member>
        <member name="M:TrulyRandom.Models.Module.ReadUpTo(System.Int32)">
            <summary>
            Reads all data from the output buffer, but no more than <c>count</c> bytes
            </summary>
            <param name="count">Number of bytes to be read</param>
            <returns>Data from the output buffer</returns>
        </member>
        <member name="M:TrulyRandom.Models.Module.ReadAll">
            <summary>
            Reads all data from the output buffer
            </summary>
            <returns>Data from the output buffer</returns>
        </member>
        <member name="M:TrulyRandom.Models.Module.ClearBuffer">
            <summary>
            Clears the output buffer and discard the data
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.AddData(System.Byte[])">
            <summary>
            Adds data to the output buffer. In case of an overflow oldest data will be discarded
            </summary>
            <param name="data">Data to be added</param>
        </member>
        <member name="P:TrulyRandom.Models.Module.ManualRun">
            <summary>
            Determines whether module is allowed to run by user
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.OverflowPause">
            <summary>
            Determines whether module is paused due to an overflow
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.Run">
            <summary>
            Shows whether module should run
            </summary>
        </member>
        <member name="F:TrulyRandom.Models.Module.dispose">
            <summary>
            Determines whether module should be disposed
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Module.Disposed">
            <summary>
            Determines whether module is disposed
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.Start">
            <summary>
            Starts the module
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.StartInternal">
            <summary>
            Module start sequence
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.Stop">
            <summary>
            Stops the module
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.StopInternal">
            <summary>
            Module stop sequence
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.Dispose">
            <summary>
            Releases all resources used by this object
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.CheckForOverflow">
            <summary>
            Pauses the module in case of overflow and unpauses otherwise
            </summary>
        </member>
        <member name="M:TrulyRandom.Models.Module.Finalize">
            <summary>
            Finalizes the object
            </summary>
        </member>
        <member name="T:TrulyRandom.Models.Source">
            <summary>
            Base class for all sources - modules that retrieve entropy from the physical world and feed it to extractors
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Source.PauseOnOverflow">
            <summary>
            Determines whether source should be paused when buffer is full
            </summary>
        </member>
        <member name="P:TrulyRandom.Models.Source.OverflowHysteresis">
            <summary>
            If source was paused due to overflow and amount of data in the buffer is lower then this threshold - it will be unpaused
            </summary>
        </member>
        <member name="T:TrulyRandom.Modules.Buffer">
            <summary>
            Allows for data storage both in the output buffer and on the disk
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Buffer.Sources">
            <summary>
            Sources of data for this buffer
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Buffer.BufferFileSize">
            <summary>
            Size of each of the files stored on the disk
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Buffer.MaxFilesToStore">
            <summary>
            Maximum number of files to store on the disk (0 to disable disk storage)
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Buffer.MinBytesInBuffer">
            <summary>
            If number of bytes in the buffer is lower than this amount - data will be loaded from the disk
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Buffer.MaxBytesInBuffer">
            <summary>
            If number of bytes in the buffer is higher than this amount - data will be saved to the disk
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Buffer.BufferDirectory">
            <summary>
            Directory in which buffer files will be located
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Buffer.MixDataFromDifferentSources">
            <summary>
            Determines whether data block should be taken from all available sources and concatenated (<c>true</c>), or from one source if possible (<c>false</c>)
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Buffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.Modules.Buffer" /> class
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Buffer.WorkerThread">
            <summary>
            Main loop
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Buffer.SaveToDisk">
            <summary>
            Saves exccess data to the disk
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Buffer.LoadFromDisk">
            <summary>
            Loads insufficient data from buffer files
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Buffer.ClearDiskData">
            <summary>
            Deletes data stored on the disk
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Buffer.GetNumberOfDataFilesAvailable">
            <summary>
            Gets the number of buffer files available on the disk
            </summary>
            <returns>Number of files available</returns>
        </member>
        <member name="M:TrulyRandom.Modules.Buffer.ReadDataFromSources">
            <summary>
            Reads data from sources
            </summary>
            <returns>Data read</returns>
        </member>
        <member name="M:TrulyRandom.Modules.Buffer.AddSource(TrulyRandom.Models.Module)">
            <summary>
            Adds source to read data from
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:TrulyRandom.Modules.Buffer.RemoveSource(TrulyRandom.Models.Module)">
            <summary>
            Removes source from the list
            </summary>
            <param name="source">Source to be removed</param>
        </member>
        <member name="T:TrulyRandom.Modules.Extractors.DeflateExtractor">
            <summary>
            Uses Deflate compression algorithm to maximize data entropy
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.DeflateExtractor.UseDefaultCompressionCalculator">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.DeflateExtractor.GetActualBatchSize">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.DeflateExtractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.Modules.Extractors.DeflateExtractor" /> class
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.DeflateExtractor.ProcessData(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:TrulyRandom.Modules.Extractors.HashExtractor">
            <summary>
            Uses hash function to compress data, eliminating dependencies within it and increasing its entropy 
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.HashExtractor.InputBlockSize">
            <summary>
            Size of the block processed by the hash function
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.HashExtractor.OutputBlockSize">
            <summary>
            Size of the output block after being processed by the hash function
            </summary>
        </member>
        <member name="T:TrulyRandom.Modules.Extractors.HashExtractor.HashFunctionEnum">
            <summary>
            Supported hash functions
            </summary>
        </member>
        <member name="F:TrulyRandom.Modules.Extractors.HashExtractor.HashFunctionEnum.MD5">
            <summary>
            A Message Digest 5 hash function with 128 bit block size
            </summary>
        </member>
        <member name="F:TrulyRandom.Modules.Extractors.HashExtractor.HashFunctionEnum.SHA1">
            <summary>
            A Secure Hash Algorithm hash function with 160 bit block size
            </summary>
        </member>
        <member name="F:TrulyRandom.Modules.Extractors.HashExtractor.HashFunctionEnum.SHA256">
            <summary>
            A Secure Hash Algorithm 2 hash function with 256 bit block size
            </summary>
        </member>
        <member name="F:TrulyRandom.Modules.Extractors.HashExtractor.HashFunctionEnum.SHA384">
            <summary>
            A Secure Hash Algorithm 2 hash function with 384 bit block size
            </summary>
        </member>
        <member name="F:TrulyRandom.Modules.Extractors.HashExtractor.HashFunctionEnum.SHA512">
            <summary>
            A Secure Hash Algorithm 2 hash function with 512 bit block size
            </summary>
        </member>
        <member name="F:TrulyRandom.Modules.Extractors.HashExtractor.hashFunction">
            <summary>
            Selected hash function
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.HashExtractor.HashFunction">
            <summary>
            Hash function used to process the data
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.HashExtractor.Chaining">
            <summary>
            Determines whether every output block should be XOR-ed with the previous one
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.HashExtractor.UseDefaultCompressionCalculator">
            <inheritdoc/>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.HashExtractor.Seedable">
            <inheritdoc/>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.HashExtractor.SeedLength">
            <summary>
            Length of the seed
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.HashExtractor.SeedRotationInterval">
            <summary>
            Number of input bytes after which seed will be rotated
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.HashExtractor.SeedSource">
            <summary>
            Source of seed data. It is recommended to use high-quality entropy from the end of a chain
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.HashExtractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.Modules.Extractors.HashExtractor" /> class
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.HashExtractor.GetActualBatchSize">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.HashExtractor.ProcessData(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:TrulyRandom.Modules.Extractors.ShuffleExtractor">
            <summary>
            
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.ShuffleExtractor.BlockSize">
            <summary>
            Block of bytes, moved together. It is recommended to use sizes as small as possible and coprime with next extractor block size (for example, hash input block size or other ShuffleExtractor block size).
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.ShuffleExtractor.MaxBatchSize">
            <summary>
            Maximum length of the batch with respect to dynamic coefficient
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.ShuffleExtractor.UseDefaultCompressionCalculator">
            <inheritdoc/>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.ShuffleExtractor.Seedable">
            <inheritdoc/>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.ShuffleExtractor.SeedLength">
            <summary>
            Length of the seed
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.ShuffleExtractor.SeedRotationInterval">
            <summary>
            Number of input bytes after which seed will be rotated
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.ShuffleExtractor.SeedSource">
            <summary>
            Source of seed data. It is recommended to use high-quality entropy from the end of a chain
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.ShuffleExtractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.Modules.Extractors.ShuffleExtractor" /> class
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.ShuffleExtractor.GetActualBatchSize">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.ShuffleExtractor.ProcessData(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.ShuffleExtractor.GenerateRandomNumberFromArrayElements(System.Byte[],System.Int32@,System.Int32,System.Byte[])">
            <summary>
            Generates numbers from 0 to <paramref name="upperBound"/> using FDR (Fast Dice Roller) algorithm
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.ShuffleExtractor.GetBit(System.Byte[],System.Int32@,System.Byte[])">
            <summary>
            Gets specified bit from the specified array with respect to the seed
            </summary>
        </member>
        <member name="T:TrulyRandom.Modules.Extractors.VonNeumannExtractor">
            <summary>
            Applies Von Neumann's algotithm to the input data thus deskewing the sequence and compressing it
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.VonNeumannExtractor.Nesting">
            <summary>
            Number of times Von Neumann's algotithm is applied to the data
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Extractors.VonNeumannExtractor.UseDefaultCompressionCalculator">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.VonNeumannExtractor.GetActualBatchSize">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Extractors.VonNeumannExtractor.ProcessData(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:TrulyRandom.Modules.Sources.AudioSource">
            <summary>
            Recieves data from the audio device
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.AudioSource.Device">
            <summary>
            Underlying DirectShow device
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.AudioSource.Running">
            <summary>
            Shows whether device is running
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.AudioSource.Disposed">
            <summary>
            Shows whether device is disposed
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.AudioSource.Still">
            <summary>
            Shows whether device is silent (provides the same sample over and over)
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.AudioSource.DeviceName">
            <summary>
            System name of the device
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.AudioSource.#ctor(System.Int32)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Modules.Sources.AudioSource"/> object by searching through available devices and attempting to get alternating samples from those
            </summary>
            <exception cref="T:TrulyRandom.DeviceNotFoundException">Thrown when no suitable devices found. If device is found and then goes offline object will keep trying to establish connection and no exception will be thrown</exception>
            <param name="autoSearchTimeout">Timeout for waiting for data from the device</param>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.AudioSource.#ctor(TrulyRandom.Devices.DeviceDescriptor)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Modules.Sources.AudioSource"/> object from given <see cref="T:TrulyRandom.Devices.DeviceDescriptor"/>. If device is unavailable object will keep trying to establish connection and no exception will be thrown
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.AudioSource.#ctor(System.String,System.String)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Modules.Sources.AudioSource"/> object from given name and moniker string. If device is unavailable object will keep trying to establish connection and no exception will be thrown
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.AudioSource.AvailableDevices">
            <summary>
            Returns all audio device descriptors currently available in the system
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.AudioSource.BPSCalculation">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.AudioSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.AudioSource.StartInternal">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.AudioSource.StopInternal">
            <inheritdoc/>
        </member>
        <member name="T:TrulyRandom.Modules.Sources.BiologicalSource">
            <summary>
            Recieves data from user actions, i. e. mouse movements and key presses
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.BiologicalSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.Modules.Sources.BiologicalSource" /> class
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.BiologicalSource.WorkerThread">
            <summary>
            Main loop
            </summary>
        </member>
        <member name="T:TrulyRandom.Modules.Sources.VideoSource">
            <summary>
            Recieves data from the video device
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.VideoSource.Device">
            <summary>
            Underlying DirectShow device
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.VideoSource.Running">
            <summary>
            Shows whether device is running
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.VideoSource.Disposed">
            <summary>
            Shows whether device is disposed
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.VideoSource.Still">
            <summary>
            Shows whether device is silent (provides the same sample over and over)
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.VideoSource.DeviceName">
            <summary>
            System name of the device
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.VideoSource.#ctor(System.Int32)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Modules.Sources.VideoSource"/> object by searching through available devices and attempting to get alternating samples from those
            </summary>
            <exception cref="T:TrulyRandom.DeviceNotFoundException">Thrown when no suitable devices found. If device is found and then goes offline object will keep trying to establish connection and no exception will be thrown</exception>
            <param name="autoSearchTimeout">Timeout for waiting for data from the device</param>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.VideoSource.#ctor(TrulyRandom.Devices.DeviceDescriptor)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Modules.Sources.VideoSource"/> object from given <see cref="T:TrulyRandom.Devices.DeviceDescriptor"/>. If device is unavailable object will keep trying to establish connection and no exception will be thrown
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.VideoSource.#ctor(System.String,System.String)">
            <summary>
            Creates new <see cref="T:TrulyRandom.Modules.Sources.VideoSource"/> object from given name and moniker string. If device is unavailable object will keep trying to establish connection and no exception will be thrown
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Sources.VideoSource.AvailableDevices">
            <summary>
            Returns all video device descriptors currently available in the system
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.VideoSource.BPSCalculation">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.VideoSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.VideoSource.StartInternal">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Sources.VideoSource.StopInternal">
            <inheritdoc/>
        </member>
        <member name="T:TrulyRandom.Modules.Tester">
            <summary>
            Applies NIST statistical tests to the data
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Tester.TestParameters">
            <summary>
            Parameters of the tests
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Tester.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.Modules.Tester" /> class
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Tester.UseDefaultCompressionCalculator">
            <inheritdoc/>
        </member>
        <member name="P:TrulyRandom.Modules.Tester.AutoSelectTests">
            <summary>
            Determines whether tests should be automatically selected based on the batch size
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Tester.OutputOnlyActuallyTestedBits">
            <summary>
            Determines whether data should be cropped to the size which was actually tested with all enabled tests
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Tester.OutputOnlySuccessfullyTestedBits">
            <summary>
            Determines whether failed batches should be discarded
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Tester.MergeAndRetestBlocksWithInsufficientCycles">
            <summary>
            Determines whether batches which failed <see cref="F:TrulyRandom.NistTests.TestsEnum.RandomExcursions"/> and <see cref="F:TrulyRandom.NistTests.TestsEnum.RandomExcursionsVariant"/> tests due to insufficient cycles should be merged and retested
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Tester.TestResultHistory">
            <summary>
            Results of last tests performed
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Tester.LastTestResult">
            <summary>
            Results of the last test performed
            </summary>
        </member>
        <member name="P:TrulyRandom.Modules.Tester.SuccessRate">
            <summary>
            Proportion of successful tests
            </summary>
        </member>
        <member name="M:TrulyRandom.Modules.Tester.GetActualBatchSize">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Modules.Tester.ProcessData(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:TrulyRandom.Nist.FFT.Apply(System.Numerics.Complex[],System.Int32)">
            <summary>
            Applies Bluestein's FFT algorithm to the array
            </summary>
            <param name="samples">Data to be converted to a frequency domain</param>
            <param name="threads">Maximum threads to be utilized</param>
        </member>
        <member name="M:TrulyRandom.Nist.FFT.BluesteinSequence(System.Int32)">
            <summary>
            Generate the bluestein sequence for the provided problem size
            </summary>
            <param name="n">Number of samples</param>
            <returns>Bluestein sequence exp(I*Pi*k^2/N)</returns>
        </member>
        <member name="M:TrulyRandom.Nist.FFT.CeilingToPowerOfTwo(System.Int32)">
            <summary>
            Find the closest perfect power of two that is larger or equal to the provided 32 bit integer
            </summary>
            <param name="number">The number of which to find the closest upper power of two</param>
            <returns>A power of two</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:TrulyRandom.Nist.FFT.Radix2Forward(System.Numerics.Complex[])">
            <summary>
            Radix-2 generic FFT for power-of-two sized sample vectors.
            </summary>
        </member>
        <member name="M:TrulyRandom.Nist.FFT.Radix2InverseParallel(System.Numerics.Complex[],System.Int32)">
            <summary>
            Radix-2 generic FFT for power-of-two sample vectors (Parallel Version).
            </summary>
        </member>
        <member name="M:TrulyRandom.Nist.FFT.Radix2Reorder``1(``0[])">
            <summary>
            Radix-2 Reorder Helper Method
            </summary>
            <typeparam name="T">Sample type</typeparam>
            <param name="samples">Sample vector</param>
        </member>
        <member name="M:TrulyRandom.Nist.FFT.Radix2Step(System.Numerics.Complex[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Radix-2 Step helper method
            </summary>
            <param name="samples">Sample vector.</param>
            <param name="exponentSign">Fourier series exponent sign.</param>
            <param name="levelSize">Level Group Size.</param>
            <param name="k">Index inside of the level.</param>
        </member>
        <member name="T:TrulyRandom.NistTests">
            <summary>
            Provides methods for testing of random number sequences according to NIST SP 800-22, as well as a number of capabilities 
            for an extended evaluation, statistics, reporting, parameter selection etc.
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.FullTestResult">
            <summary>
            Result of a series of tests, past all neccesary evaluations
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.FullTestResult.Time">
            <summary>
            Total duration of the testing
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.FullTestResult.Success">
            <summary>
            Final decision on the tested sequence.<br/>
            To be considered random, proportion of failed tests is sufficiently small (&lt;= <see cref="P:TrulyRandom.NistTests.TestParameters.AllowedFailedTestProportion"/>)
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.FullTestResult.FailedTests">
            <summary>
            Tests considered failed
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.FullTestResult.InsufficientCycles">
            <summary>
            Test had failed only due to insufficient number of cycles (tests <see cref="F:TrulyRandom.NistTests.TestsEnum.RandomExcursions"/> and <see cref="F:TrulyRandom.NistTests.TestsEnum.RandomExcursions"/>).
            Try to increase sequence size to reduce the number of such failures
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.FullTestResult.SuccessfulTestProportion">
            <summary>
            Proportion of tests considered successful
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.FullTestResult.ActuallyTestedBits">
            <summary>
            Number of bits which was actually tested by all conducted tests. Some tests discard some of the data if it is not enough to form a whole block
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.FullTestResult.TestResults">
            <summary>
            Results of each one of the conducted tests
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.FullTestResult.Report">
            <summary>
            Human-readable report about the test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.MaximumThreads">
            <summary>
            Maximum amount of threads this instance allowed to create
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.Parameters">
            <summary>
            Test parameters
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTests.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.NistTests" /> class
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTests.#ctor(TrulyRandom.NistTests.TestParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.NistTests" /> class with specified parameters
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTests.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.NistTests" /> class with test selection for the specified sequence size
            It is possible to test longer sequences, but test results for shorter ones will be nonrepresentative
            </summary>
            <param name="sequenceSize">Minimum sequence size</param>
            <exception cref="T:System.ArgumentException">Thrown if sequence size is too small to run even a single test</exception>
        </member>
        <member name="T:TrulyRandom.NistTests.TestsEnum">
            <summary>
            Specifies a NIST SP 800-22 test or a set of tests
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.Frequency">
            <Func name="Frequency">
    <summary>
      The focus of the test is the proportion of zeroes and ones for the entire sequence.
      The purpose of this test is to determine whether the number of ones and zeros in a sequence are approximately
      the same as wouldbe expected for a truly random sequence. The test assesses the closeness of the fraction of
      ones to ½, that is, the number of ones and zeroes in a sequence should be about the same.<br />
      For more info, see section 2.1 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.BlockFrequency">
            <Func name="BlockFrequency">
    <summary>
      The focus of the test is the proportion of ones within M-bit blocks.
      The purpose of this test is to determine whether the frequency of ones in an M-bit block is approximately M/2,
      as would be expected under an assumption of randomness.<br />
      For more info, see section 2.2 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.Runs">
            <Func name="Runs">
    <summary>
      The focus of this test is the total number of runs in the sequence, where a run is an uninterrupted sequence
      of identical bits. A run of length k consists of exactly k identical bits and is bounded before and after with
      a bit of the opposite value. The purpose of the runs test is to determine whether the number of runs of
      ones and zeros of various lengths is as expected for a random sequence. In particular, this test determines
      whether the oscillation between such zeros and ones is too fast or too slow.<br />
      For more info, see section 2.3 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.LongestRunOfOnes">
            <Func name="LongestRunOfOnes">
    <summary>
      The focus of the test is the longest run of ones within M-bit blocks. The purpose of this test is to
      determine whether the length of the longest run of ones within the tested sequence is consistent with the
      length of the longest run of ones that would be expected in a random sequence.<br />
      For more info, see section 2.4 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.BinaryMatrixRank">
            <Func name="BinaryMatrixRank">
    <summary>
      The focus of the test is the rank of disjoint sub-matrices of the entire sequence. The purpose of this test is
      to check for linear dependence among fixed length substrings of the original sequence.<br />
      For more info, see section 2.5 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.DiscreteFourierTransform">
            <Func name="DiscreteFourierTransform">
    <summary>
      The focus of this test is the peak heights in the Discrete Fourier Transform of the sequence. The purpose
      of this test is to detect periodic features (i.e., repetitive patterns that are near each other) in the tested
      sequence that would indicate a deviation from the assumption of randomness.<br />
      For more info, see section 2.6 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.NonOverlappingTemplateMatchings">
            <Func name="NonOverlappingTemplateMatchings">
    <summary>
      The focus of this test is the number of occurrences of pre-specified target strings. The purpose of this
      test is to detect generators that produce too many occurrences of a given non-periodic (aperiodic) pattern.
      For this test and for the Overlapping Template Matching test of Section 2.8, an m-bit window is used to
      search for a specific m-bit pattern. If the pattern is not found, the window slides one bit position. If the
      pattern is found, the window is reset to the bit after the found pattern, and the search resumes.<br />
      For more info, see section 2.7 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.OverlappingTemplateMatchings">
            <Func name="OverlappingTemplateMatchings">
    <summary>
      The focus of the Overlapping Template Matching test is the number of occurrences of pre-specified target
      strings. Both this test and the Non-overlapping Template Matching use an m-bit window to search
      for a specific m-bit pattern. As with the Non-overlapping Template Matching test, if the pattern is not found,
      the window slides one bit position. The difference between this test and the test in Section 2.7 is that
      when the pattern is found, the window slides only one bit before resuming the search.<br />
      For more info, see section 2.8 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.MaurersUniversal">
            <Func name="MaurersUniversal">
    <summary>
      The focus of this test is the number of bits between matching patterns (a measure that is related to the
      length of a compressed sequence). The purpose of the test is to detect whether or not the sequence can be
      significantly compressed without loss of information. A significantly compressible sequence is
      considered to be non-random.<br />
      For more info, see section 2.9 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.LinearComplexity">
            <Func name="LinearComplexity">
    <summary>
      The focus of this test is the length of a linear feedback shift register (LFSR). The purpose of this test is to
      determine whether or not the sequence is complex enough to be considered random. Random sequences
      are characterized by longer LFSRs. An LFSR that is too short implies non-randomness.<br />
      For more info, see section 2.10 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.Serial">
            <Func name="Serial">
    <summary>
      The focus of this test is the frequency of all possible overlapping m-bit patterns across the entire
      sequence. The purpose of this test is to determine whether the number of occurrences of the 2m m-bit
      overlapping patterns is approximately the same as would be expected for a random sequence. Random
      sequences have uniformity; that is, every m-bit pattern has the same chance of appearing as every other
      m-bit pattern.<br />
      For more info, see section 2.11 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.ApproximateEntropy">
            <Func name="ApproximateEntropy">
    <summary>
      As with the Serial test, the focus of this test is the frequency of all possible overlapping
      m-bit patterns across the entire sequence. The purpose of the test is to compare the frequency of
      overlapping blocks of two consecutive/adjacent lengths (m and m+1) against the expected result for a
      random sequence.<br />
      For more info, see section 2.12 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.CumulativeSums">
            <Func name="CumulativeSums">
    <summary>
      The focus of this test is the maximal excursion (from zero) of the random walk defined by the cumulative
      sum of adjusted (-1, +1) digits in the sequence.The purpose of the test is to determine whether the
      cumulative sum of the partial sequences occurring in the tested sequence is too large or too small relative
      to the expected behavior of that cumulative sum for random sequences.For a random sequence, the excursions
      of the random walk should be near zero.<br />
      For more info, see section 2.13 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.RandomExcursions">
            <Func name="RandomExcursions">
    <summary>
      The focus of this test is the number of cycles having exactly K visits in a cumulative sum random walk.
      The cumulative sum random walk is derived from partial sums after the(0,1) sequence is transferred to
      the appropriate(-1, +1) sequence.A cycle of a random walk consists of a sequence of steps of unit length
      taken at random that begin at and return to the origin.The purpose of this test is to determine if the
      number of visits to a particular state within a cycle deviates from what one would expect for a random
      sequence.This test is actually a series of eight tests (and conclusions), one test and conclusion for each of
      the states: -4, -3, -2, -1 and +1, +2, +3, +4. <br />
      Note that for this test it is recommended to keep sequence size as big as possible to avoid getting an <see cref="F:TrulyRandom.NistTests.TestResultEnum.IncufficientCycles" /> resut.<br />
      For more info, see section 2.14 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.RandomExcursionsVariant">
            <Func name="RandomExcursionsVariant">
    <summary>
      The focus of this test is the total number of times that a particular state is visited (i.e., occurs) in a
      cumulative sum random walk. The purpose of this test is to detect deviations from the expected number
      of visits to various states in the random walk. This test is actually a series of eighteen tests (and
      conclusions), one test and conclusion for each of the states: -9, -8, …, -1 and +1, +2, …, +9.<br />
      Note that for this test it is recommended to keep sequence size as big as possible to avoid getting an <see cref="F:TrulyRandom.NistTests.TestResultEnum.IncufficientCycles" /> resut.<br />
      For more info, see section 2.15 of the paper
    </summary>
  </Func>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.All">
            <summary>
            All available tests
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.TestsEnum.None">
            <summary>
            None of the tests
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.testHistory">
            <summary>
            Recent test results
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTests.Perform(System.Byte[])">
            <summary>
            Performs the tests on the specified data
            </summary>
            <param name="data">Data to be tested</param>
            <returns>A <see cref="T:TrulyRandom.NistTests.FullTestResult"/> object containing information abouth the results of aech test and an overlall conclusion</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.Perform(System.Collections.BitArray)">
            <summary>
            Performs the tests on the specified data
            </summary>
            <param name="data">Data to be tested</param>
            <returns>A <see cref="T:TrulyRandom.NistTests.FullTestResult"/> object containing information abouth the results of aech test and an overlall conclusion</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.Perform(System.Byte[],TrulyRandom.NistTests.TestsEnum)">
            <summary>
            Performs the specified tests on the specified data
            </summary>
            <param name="data">Data to be tested</param>
            <param name="testsToPerform">Tests to perform</param>
            <returns>A <see cref="T:TrulyRandom.NistTests.FullTestResult"/> object containing information abouth the results of aech test and an overlall conclusion</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.Perform(System.Collections.BitArray,TrulyRandom.NistTests.TestsEnum)">
            <summary>
            Performs the specified tests on the specified data
            </summary>
            <param name="data">Data to be tested</param>
            <param name="testsToPerform">Tests to perform</param>
            <returns>A <see cref="T:TrulyRandom.NistTests.FullTestResult"/> object containing information abouth the results of aech test and an overlall conclusion</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.ClearHistory">
            <summary>
            Clears the test result history
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.MinSequenceSizes">
            <summary>
            Minimum sequence sizes for the corresponding tests. It is still allowed to test shorter sequences, but results will be nonrepresentative
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.Frequency">
            <summary>
            Minimum sequence size for the frequency test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.BlockFrequency">
            <summary>
            Minimum sequence size for the block frequency test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.Runs">
            <summary>
            Minimum sequence size for the runs test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.LongestRunOfOnes">
            <summary>
            Minimum sequence size for the longest run of ones test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.BinaryMatrixRank">
            <summary>
            Minimum sequence size for the binary matrix rank test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.DiscreteFourierTransform">
            <summary>
            Minimum sequence size for the discrete Fourier transform test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.NonOverlappingTemplateMatchings">
            <summary>
            Minimum sequence size for the non-overlapping template matchings test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.OverlappingTemplateMatchings">
            <summary>
            Minimum sequence size for the overlapping template matchings test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.MaurersUniversal">
            <summary>
            Minimum sequence size for the Maurer's universal test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.LinearComplexity">
            <summary>
            Minimum sequence size for the linear complexity test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.Serial">
            <summary>
            Minimum sequence size for the serial test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.ApproximateEntropy">
            <summary>
            Minimum sequence size for the approximate entropy test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.CumulativeSums">
            <summary>
            Minimum sequence size for the cumulative sums test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.RandomExcursions">
            <summary>
            Minimum sequence size for the random excursions test<br/>
            Note that for this test it is recommended to keep block size as big as possible to avoid getting an <see cref="F:TrulyRandom.NistTests.TestResultEnum.IncufficientCycles"/> resut
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.MinSequenceSizes.RandomExcursionsVariant">
            <summary>
            Minimum sequence size for the random excursions variant test<br/>
            Note that for this test it is recommended to keep block size as big as possible to avoid getting an <see cref="F:TrulyRandom.NistTests.TestResultEnum.IncufficientCycles"/> resut
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.SingleTestResult">
            <summary>
            Reasult of a single test, not evaluated yet
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.SingleTestResult.PValues">
            <summary>
            P-values for the subtests. P-value is a measure of how random the sequence is according to this test or subtest
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.SingleTestResult.ActuallyTestedBits">
            <summary>
            Number of bits which was actually tested. Some tests discard some of the data if it is not enough to form a whole block
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.SingleTestResult.Report">
            <summary>
            Human-readable report about the test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.SingleTestResult.Time">
            <summary>
            Duration of the testing
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTests.Frequency(System.Byte[])">
            <Func name="Frequency">
    <summary>
      The focus of the test is the proportion of zeroes and ones for the entire sequence.
      The purpose of this test is to determine whether the number of ones and zeros in a sequence are approximately
      the same as wouldbe expected for a truly random sequence. The test assesses the closeness of the fraction of
      ones to ½, that is, the number of ones and zeroes in a sequence should be about the same.<br />
      For more info, see section 2.1 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.Frequency(System.Collections.BitArray)">
            <Func name="Frequency">
    <summary>
      The focus of the test is the proportion of zeroes and ones for the entire sequence.
      The purpose of this test is to determine whether the number of ones and zeros in a sequence are approximately
      the same as wouldbe expected for a truly random sequence. The test assesses the closeness of the fraction of
      ones to ½, that is, the number of ones and zeroes in a sequence should be about the same.<br />
      For more info, see section 2.1 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.BlockFrequency(System.Byte[],System.Int32)">
            <Func name="BlockFrequency">
    <summary>
      The focus of the test is the proportion of ones within M-bit blocks.
      The purpose of this test is to determine whether the frequency of ones in an M-bit block is approximately M/2,
      as would be expected under an assumption of randomness.<br />
      For more info, see section 2.2 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.BlockFrequency(System.Collections.BitArray,System.Int32)">
            <Func name="BlockFrequency">
    <summary>
      The focus of the test is the proportion of ones within M-bit blocks.
      The purpose of this test is to determine whether the frequency of ones in an M-bit block is approximately M/2,
      as would be expected under an assumption of randomness.<br />
      For more info, see section 2.2 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.Runs(System.Byte[])">
            <Func name="Runs">
    <summary>
      The focus of this test is the total number of runs in the sequence, where a run is an uninterrupted sequence
      of identical bits. A run of length k consists of exactly k identical bits and is bounded before and after with
      a bit of the opposite value. The purpose of the runs test is to determine whether the number of runs of
      ones and zeros of various lengths is as expected for a random sequence. In particular, this test determines
      whether the oscillation between such zeros and ones is too fast or too slow.<br />
      For more info, see section 2.3 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.Runs(System.Collections.BitArray)">
            <Func name="Runs">
    <summary>
      The focus of this test is the total number of runs in the sequence, where a run is an uninterrupted sequence
      of identical bits. A run of length k consists of exactly k identical bits and is bounded before and after with
      a bit of the opposite value. The purpose of the runs test is to determine whether the number of runs of
      ones and zeros of various lengths is as expected for a random sequence. In particular, this test determines
      whether the oscillation between such zeros and ones is too fast or too slow.<br />
      For more info, see section 2.3 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.LongestRunOfOnes(System.Byte[])">
            <Func name="LongestRunOfOnes">
    <summary>
      The focus of the test is the longest run of ones within M-bit blocks. The purpose of this test is to
      determine whether the length of the longest run of ones within the tested sequence is consistent with the
      length of the longest run of ones that would be expected in a random sequence.<br />
      For more info, see section 2.4 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.LongestRunOfOnes(System.Collections.BitArray)">
            <Func name="LongestRunOfOnes">
    <summary>
      The focus of the test is the longest run of ones within M-bit blocks. The purpose of this test is to
      determine whether the length of the longest run of ones within the tested sequence is consistent with the
      length of the longest run of ones that would be expected in a random sequence.<br />
      For more info, see section 2.4 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.BinaryMatrixRank(System.Byte[],System.Int32)">
            <Func name="BinaryMatrixRank">
    <summary>
      The focus of the test is the rank of disjoint sub-matrices of the entire sequence. The purpose of this test is
      to check for linear dependence among fixed length substrings of the original sequence.<br />
      For more info, see section 2.5 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="matrixSize">Size of a single matrix (-1 for autoselection). Matrices are square, so they contain matrixSize^2 elements</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.BinaryMatrixRank(System.Collections.BitArray,System.Int32)">
            <Func name="BinaryMatrixRank">
    <summary>
      The focus of the test is the rank of disjoint sub-matrices of the entire sequence. The purpose of this test is
      to check for linear dependence among fixed length substrings of the original sequence.<br />
      For more info, see section 2.5 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="matrixSize">Size of a single matrix (-1 for autoselection). Matrices are square, so they contain matrixSize^2 elements</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.DiscreteFourierTransform(System.Byte[])">
            <Func name="DiscreteFourierTransform">
    <summary>
      The focus of this test is the peak heights in the Discrete Fourier Transform of the sequence. The purpose
      of this test is to detect periodic features (i.e., repetitive patterns that are near each other) in the tested
      sequence that would indicate a deviation from the assumption of randomness.<br />
      For more info, see section 2.6 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.DiscreteFourierTransform(System.Collections.BitArray)">
            <Func name="DiscreteFourierTransform">
    <summary>
      The focus of this test is the peak heights in the Discrete Fourier Transform of the sequence. The purpose
      of this test is to detect periodic features (i.e., repetitive patterns that are near each other) in the tested
      sequence that would indicate a deviation from the assumption of randomness.<br />
      For more info, see section 2.6 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.GenerateAperiodicTemplates(System.Int32)">
            <summary>
            Generates all possible aperiodic templates of the given length
            </summary>
            <param name="length">Length of the templates</param>
            <returns>All possible aperiodic templates of the given length</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.NonOverlappingTemplateMatchings(System.Byte[],System.Collections.BitArray[],System.Int32)">
            <Func name="NonOverlappingTemplateMatchings">
    <summary>
      The focus of this test is the number of occurrences of pre-specified target strings. The purpose of this
      test is to detect generators that produce too many occurrences of a given non-periodic (aperiodic) pattern.
      For this test and for the Overlapping Template Matching test of Section 2.8, an m-bit window is used to
      search for a specific m-bit pattern. If the pattern is not found, the window slides one bit position. If the
      pattern is found, the window is reset to the bit after the found pattern, and the search resumes.<br />
      For more info, see section 2.7 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="templates">An array of templates to be used for testing (null for autoselection)</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.NonOverlappingTemplateMatchings(System.Collections.BitArray,System.Collections.BitArray[],System.Int32)">
            <Func name="NonOverlappingTemplateMatchings">
    <summary>
      The focus of this test is the number of occurrences of pre-specified target strings. The purpose of this
      test is to detect generators that produce too many occurrences of a given non-periodic (aperiodic) pattern.
      For this test and for the Overlapping Template Matching test of Section 2.8, an m-bit window is used to
      search for a specific m-bit pattern. If the pattern is not found, the window slides one bit position. If the
      pattern is found, the window is reset to the bit after the found pattern, and the search resumes.<br />
      For more info, see section 2.7 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="templates">An array of templates to be used for testing (null for autoselection)</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.NonOverlappingTemplateMatchings(System.Byte[],System.Int32,System.Int32)">
            <Func name="NonOverlappingTemplateMatchings">
    <summary>
      The focus of this test is the number of occurrences of pre-specified target strings. The purpose of this
      test is to detect generators that produce too many occurrences of a given non-periodic (aperiodic) pattern.
      For this test and for the Overlapping Template Matching test of Section 2.8, an m-bit window is used to
      search for a specific m-bit pattern. If the pattern is not found, the window slides one bit position. If the
      pattern is found, the window is reset to the bit after the found pattern, and the search resumes.<br />
      For more info, see section 2.7 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="templateLength">Length of the templates to be used (-1 for autoselection)</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.NonOverlappingTemplateMatchings(System.Collections.BitArray,System.Int32,System.Int32)">
            <Func name="NonOverlappingTemplateMatchings">
    <summary>
      The focus of this test is the number of occurrences of pre-specified target strings. The purpose of this
      test is to detect generators that produce too many occurrences of a given non-periodic (aperiodic) pattern.
      For this test and for the Overlapping Template Matching test of Section 2.8, an m-bit window is used to
      search for a specific m-bit pattern. If the pattern is not found, the window slides one bit position. If the
      pattern is found, the window is reset to the bit after the found pattern, and the search resumes.<br />
      For more info, see section 2.7 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="templateLength">Length of the templates to be used (-1 for autoselection)</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.NonOverlappingTemplateMatchings(System.Byte[],System.Collections.BitArray,System.Int32)">
            <Func name="NonOverlappingTemplateMatchings">
    <summary>
      The focus of this test is the number of occurrences of pre-specified target strings. The purpose of this
      test is to detect generators that produce too many occurrences of a given non-periodic (aperiodic) pattern.
      For this test and for the Overlapping Template Matching test of Section 2.8, an m-bit window is used to
      search for a specific m-bit pattern. If the pattern is not found, the window slides one bit position. If the
      pattern is found, the window is reset to the bit after the found pattern, and the search resumes.<br />
      For more info, see section 2.7 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="template">Template to be used</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.NonOverlappingTemplateMatchings(System.Collections.BitArray,System.Collections.BitArray,System.Int32)">
            <Func name="NonOverlappingTemplateMatchings">
    <summary>
      The focus of this test is the number of occurrences of pre-specified target strings. The purpose of this
      test is to detect generators that produce too many occurrences of a given non-periodic (aperiodic) pattern.
      For this test and for the Overlapping Template Matching test of Section 2.8, an m-bit window is used to
      search for a specific m-bit pattern. If the pattern is not found, the window slides one bit position. If the
      pattern is found, the window is reset to the bit after the found pattern, and the search resumes.<br />
      For more info, see section 2.7 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="template">Template to be used</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.OverlappingTemplateMatchings(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <Func name="OverlappingTemplateMatchings">
    <summary>
      The focus of the Overlapping Template Matching test is the number of occurrences of pre-specified target
      strings. Both this test and the Non-overlapping Template Matching use an m-bit window to search
      for a specific m-bit pattern. As with the Non-overlapping Template Matching test, if the pattern is not found,
      the window slides one bit position. The difference between this test and the test in Section 2.7 is that
      when the pattern is found, the window slides only one bit before resuming the search.<br />
      For more info, see section 2.8 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="templateLength">Length of the template to be used (-1 for autoselection)</param>
            <param name="degreesOfFreedom">Degrees of freedom of the chi-squared distribution (-1 for autoselection)</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.OverlappingTemplateMatchings(System.Collections.BitArray,System.Int32,System.Int32,System.Int32)">
            <Func name="OverlappingTemplateMatchings">
    <summary>
      The focus of the Overlapping Template Matching test is the number of occurrences of pre-specified target
      strings. Both this test and the Non-overlapping Template Matching use an m-bit window to search
      for a specific m-bit pattern. As with the Non-overlapping Template Matching test, if the pattern is not found,
      the window slides one bit position. The difference between this test and the test in Section 2.7 is that
      when the pattern is found, the window slides only one bit before resuming the search.<br />
      For more info, see section 2.8 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="templateLength">Length of the template to be used (-1 for autoselection)</param>
            <param name="degreesOfFreedom">Degrees of freedom of the chi-squared distribution (-1 for autoselection)</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.OverlappingTemplateMatchings(System.Byte[],System.Collections.BitArray[],System.Int32,System.Int32)">
            <Func name="OverlappingTemplateMatchings">
    <summary>
      The focus of the Overlapping Template Matching test is the number of occurrences of pre-specified target
      strings. Both this test and the Non-overlapping Template Matching use an m-bit window to search
      for a specific m-bit pattern. As with the Non-overlapping Template Matching test, if the pattern is not found,
      the window slides one bit position. The difference between this test and the test in Section 2.7 is that
      when the pattern is found, the window slides only one bit before resuming the search.<br />
      For more info, see section 2.8 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="templates">Templates to be used (null for autoselection)</param>
            <param name="degreesOfFreedom">Degrees of freedom of the chi-squared distribution (-1 for autoselection)</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.OverlappingTemplateMatchings(System.Collections.BitArray,System.Collections.BitArray[],System.Int32,System.Int32)">
            <Func name="OverlappingTemplateMatchings">
    <summary>
      The focus of the Overlapping Template Matching test is the number of occurrences of pre-specified target
      strings. Both this test and the Non-overlapping Template Matching use an m-bit window to search
      for a specific m-bit pattern. As with the Non-overlapping Template Matching test, if the pattern is not found,
      the window slides one bit position. The difference between this test and the test in Section 2.7 is that
      when the pattern is found, the window slides only one bit before resuming the search.<br />
      For more info, see section 2.8 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="templates">Templates to be used (null for autoselection)</param>
            <param name="degreesOfFreedom">Degrees of freedom of the chi-squared distribution (-1 for autoselection)</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.OverlappingTemplateMatchings(System.Byte[],System.Collections.BitArray,System.Int32,System.Int32)">
            <Func name="OverlappingTemplateMatchings">
    <summary>
      The focus of the Overlapping Template Matching test is the number of occurrences of pre-specified target
      strings. Both this test and the Non-overlapping Template Matching use an m-bit window to search
      for a specific m-bit pattern. As with the Non-overlapping Template Matching test, if the pattern is not found,
      the window slides one bit position. The difference between this test and the test in Section 2.7 is that
      when the pattern is found, the window slides only one bit before resuming the search.<br />
      For more info, see section 2.8 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="template">Template to be used (-1 for autoselection)</param>
            <param name="degreesOfFreedom">Degrees of freedom of the chi-squared distribution (-1 for autoselection)</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.OverlappingTemplateMatchings(System.Collections.BitArray,System.Collections.BitArray,System.Int32,System.Int32)">
            <Func name="OverlappingTemplateMatchings">
    <summary>
      The focus of the Overlapping Template Matching test is the number of occurrences of pre-specified target
      strings. Both this test and the Non-overlapping Template Matching use an m-bit window to search
      for a specific m-bit pattern. As with the Non-overlapping Template Matching test, if the pattern is not found,
      the window slides one bit position. The difference between this test and the test in Section 2.7 is that
      when the pattern is found, the window slides only one bit before resuming the search.<br />
      For more info, see section 2.8 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="template">Template to be used (-1 for autoselection)</param>
            <param name="degreesOfFreedom">Degrees of freedom of the chi-squared distribution (-1 for autoselection)</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.MaurersUniversal(System.Byte[],System.Int32,System.Int32)">
            <Func name="MaurersUniversal">
    <summary>
      The focus of this test is the number of bits between matching patterns (a measure that is related to the
      length of a compressed sequence). The purpose of the test is to detect whether or not the sequence can be
      significantly compressed without loss of information. A significantly compressible sequence is
      considered to be non-random.<br />
      For more info, see section 2.9 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <param name="initializationBlocks">A number of blocks used to initialize the table (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.MaurersUniversal(System.Collections.BitArray,System.Int32,System.Int32)">
            <Func name="MaurersUniversal">
    <summary>
      The focus of this test is the number of bits between matching patterns (a measure that is related to the
      length of a compressed sequence). The purpose of the test is to detect whether or not the sequence can be
      significantly compressed without loss of information. A significantly compressible sequence is
      considered to be non-random.<br />
      For more info, see section 2.9 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <param name="initializationBlocks">A number of blocks used to initialize the table (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.LinearComplexity(System.Byte[],System.Int32,System.Int32)">
            <Func name="LinearComplexity">
    <summary>
      The focus of this test is the length of a linear feedback shift register (LFSR). The purpose of this test is to
      determine whether or not the sequence is complex enough to be considered random. Random sequences
      are characterized by longer LFSRs. An LFSR that is too short implies non-randomness.<br />
      For more info, see section 2.10 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <param name="degreesOfFreedom">Degrees of freedom of the chi-squared distribution (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.LinearComplexity(System.Collections.BitArray,System.Int32,System.Int32)">
            <Func name="LinearComplexity">
    <summary>
      The focus of this test is the length of a linear feedback shift register (LFSR). The purpose of this test is to
      determine whether or not the sequence is complex enough to be considered random. Random sequences
      are characterized by longer LFSRs. An LFSR that is too short implies non-randomness.<br />
      For more info, see section 2.10 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <param name="degreesOfFreedom">Degrees of freedom of the chi-squared distribution (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.Serial(System.Byte[],System.Int32)">
            <Func name="Serial">
    <summary>
      The focus of this test is the frequency of all possible overlapping m-bit patterns across the entire
      sequence. The purpose of this test is to determine whether the number of occurrences of the 2m m-bit
      overlapping patterns is approximately the same as would be expected for a random sequence. Random
      sequences have uniformity; that is, every m-bit pattern has the same chance of appearing as every other
      m-bit pattern.<br />
      For more info, see section 2.11 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.Serial(System.Collections.BitArray,System.Int32)">
            <Func name="Serial">
    <summary>
      The focus of this test is the frequency of all possible overlapping m-bit patterns across the entire
      sequence. The purpose of this test is to determine whether the number of occurrences of the 2m m-bit
      overlapping patterns is approximately the same as would be expected for a random sequence. Random
      sequences have uniformity; that is, every m-bit pattern has the same chance of appearing as every other
      m-bit pattern.<br />
      For more info, see section 2.11 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.ApproximateEntropy(System.Byte[],System.Int32)">
            <Func name="ApproximateEntropy">
    <summary>
      As with the Serial test, the focus of this test is the frequency of all possible overlapping
      m-bit patterns across the entire sequence. The purpose of the test is to compare the frequency of
      overlapping blocks of two consecutive/adjacent lengths (m and m+1) against the expected result for a
      random sequence.<br />
      For more info, see section 2.12 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.ApproximateEntropy(System.Collections.BitArray,System.Int32)">
            <Func name="ApproximateEntropy">
    <summary>
      As with the Serial test, the focus of this test is the frequency of all possible overlapping
      m-bit patterns across the entire sequence. The purpose of the test is to compare the frequency of
      overlapping blocks of two consecutive/adjacent lengths (m and m+1) against the expected result for a
      random sequence.<br />
      For more info, see section 2.12 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <param name="blockLength">Length of a single block (-1 for autoselection)</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.CumulativeSums(System.Byte[])">
            <Func name="CumulativeSums">
    <summary>
      The focus of this test is the maximal excursion (from zero) of the random walk defined by the cumulative
      sum of adjusted (-1, +1) digits in the sequence.The purpose of the test is to determine whether the
      cumulative sum of the partial sequences occurring in the tested sequence is too large or too small relative
      to the expected behavior of that cumulative sum for random sequences.For a random sequence, the excursions
      of the random walk should be near zero.<br />
      For more info, see section 2.13 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.CumulativeSums(System.Collections.BitArray)">
            <Func name="CumulativeSums">
    <summary>
      The focus of this test is the maximal excursion (from zero) of the random walk defined by the cumulative
      sum of adjusted (-1, +1) digits in the sequence.The purpose of the test is to determine whether the
      cumulative sum of the partial sequences occurring in the tested sequence is too large or too small relative
      to the expected behavior of that cumulative sum for random sequences.For a random sequence, the excursions
      of the random walk should be near zero.<br />
      For more info, see section 2.13 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.RandomExcursions(System.Byte[])">
            <Func name="RandomExcursions">
    <summary>
      The focus of this test is the number of cycles having exactly K visits in a cumulative sum random walk.
      The cumulative sum random walk is derived from partial sums after the(0,1) sequence is transferred to
      the appropriate(-1, +1) sequence.A cycle of a random walk consists of a sequence of steps of unit length
      taken at random that begin at and return to the origin.The purpose of this test is to determine if the
      number of visits to a particular state within a cycle deviates from what one would expect for a random
      sequence.This test is actually a series of eight tests (and conclusions), one test and conclusion for each of
      the states: -4, -3, -2, -1 and +1, +2, +3, +4. <br />
      Note that for this test it is recommended to keep sequence size as big as possible to avoid getting an <see cref="F:TrulyRandom.NistTests.TestResultEnum.IncufficientCycles" /> resut.<br />
      For more info, see section 2.14 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.RandomExcursions(System.Collections.BitArray)">
            <Func name="RandomExcursions">
    <summary>
      The focus of this test is the number of cycles having exactly K visits in a cumulative sum random walk.
      The cumulative sum random walk is derived from partial sums after the(0,1) sequence is transferred to
      the appropriate(-1, +1) sequence.A cycle of a random walk consists of a sequence of steps of unit length
      taken at random that begin at and return to the origin.The purpose of this test is to determine if the
      number of visits to a particular state within a cycle deviates from what one would expect for a random
      sequence.This test is actually a series of eight tests (and conclusions), one test and conclusion for each of
      the states: -4, -3, -2, -1 and +1, +2, +3, +4. <br />
      Note that for this test it is recommended to keep sequence size as big as possible to avoid getting an <see cref="F:TrulyRandom.NistTests.TestResultEnum.IncufficientCycles" /> resut.<br />
      For more info, see section 2.14 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.RandomExcursionsVariant(System.Byte[])">
            <Func name="RandomExcursionsVariant">
    <summary>
      The focus of this test is the total number of times that a particular state is visited (i.e., occurs) in a
      cumulative sum random walk. The purpose of this test is to detect deviations from the expected number
      of visits to various states in the random walk. This test is actually a series of eighteen tests (and
      conclusions), one test and conclusion for each of the states: -9, -8, …, -1 and +1, +2, …, +9.<br />
      Note that for this test it is recommended to keep sequence size as big as possible to avoid getting an <see cref="F:TrulyRandom.NistTests.TestResultEnum.IncufficientCycles" /> resut.<br />
      For more info, see section 2.15 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="M:TrulyRandom.NistTests.RandomExcursionsVariant(System.Collections.BitArray)">
            <Func name="RandomExcursionsVariant">
    <summary>
      The focus of this test is the total number of times that a particular state is visited (i.e., occurs) in a
      cumulative sum random walk. The purpose of this test is to detect deviations from the expected number
      of visits to various states in the random walk. This test is actually a series of eighteen tests (and
      conclusions), one test and conclusion for each of the states: -9, -8, …, -1 and +1, +2, …, +9.<br />
      Note that for this test it is recommended to keep sequence size as big as possible to avoid getting an <see cref="F:TrulyRandom.NistTests.TestResultEnum.IncufficientCycles" /> resut.<br />
      For more info, see section 2.15 of the paper
    </summary>
  </Func>
            <param name="data">Data to be tested</param>
            <returns>Test result</returns>
        </member>
        <member name="T:TrulyRandom.NistTests.TestParameters">
            <summary>
            Parameters for the NIST SP 800-22 tests
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.TestsToPerform">
            <summary>
            Determines what tests should be performed by the <see cref="M:TrulyRandom.NistTests.Perform(System.Byte[])"/> method
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.SignificanceLevel">
            <summary>
            Determines a threshold, which p-value should exceed to be considered successful
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.AllowedFailedTestProportion">
            <summary>
            Determines the maximum proportion of failed tests for sequence to be considered random
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.AllowedFailedSubtestProportion">
            <summary>
            Determines the maximum proportion of failed subtests for the test to be considered successful
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.TestParameters.LongTermEvaluationParams">
            <summary>
            Parameters of a long-term evaluation routine. It stores and checks a history of last test results to ensure no subtest fails too often: it can
            be an indication of a dependency within the data and therefore a generator flaw<br/>
            For more info, see section 2.14.8 of the paper
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.LongTermEvaluationParams.PassByDefault">
            <summary>
            Determines whether proportion of the succeeded tests should be considered good 
            if not enough data is accumulated ( &lt; <see cref="P:TrulyRandom.NistTests.TestParameters.LongTermEvaluationParams.MinPreviousTestResultsToCheck"/> ).<br/>
            Disabling this parameter will likely cause first <see cref="P:TrulyRandom.NistTests.TestParameters.LongTermEvaluationParams.MinPreviousTestResultsToCheck"/> sequences to be considered non-random,
            however is can increase overall security of the solution
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.LongTermEvaluationParams.AllowedSinglePValueFailureRate">
            <summary>
            Allowed rate of failure of a single p-value within the last <see cref="P:TrulyRandom.NistTests.TestParameters.LongTermEvaluationParams.PreviousTestResultsToCheck"/>
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.LongTermEvaluationParams.PreviousTestResultsToCheck">
            <summary>
            Maximum amount of last test results to be tested
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.LongTermEvaluationParams.MinPreviousTestResultsToCheck">
            <summary>
            Maximum amount of last test results to be tested. If the number of results is insufficient then behaviour 
            is determined by the <see cref="P:TrulyRandom.NistTests.TestParameters.LongTermEvaluationParams.PassByDefault"/> option
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.TestParameters.BlockFrequencyParams">
            <summary>
            Parameters of the block frequency test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.BlockFrequencyParams.BlockLength">
            <summary>
            Length of a single block (-1 for autoselection)
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.TestParameters.BinaryMatrixRankParams">
            <summary>
            Parameters of the binary matrix rank test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.BinaryMatrixRankParams.MatrixSize">
            <summary>
            Size of a single matrix (-1 for autoselection). Matrices are square, so they contain matrixSize^2 elements
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams">
            <summary>
            Parameters of the non-overlapping template matchings test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.Template">
            <summary>
            Template to be used for testing (null to disable this parameter).<br/> 
            If one of the following parameters (in order of priority):<br/> 
            1. <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.Templates"/><br/> 
            2. <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.Template"/><br/> 
            3. <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.TemplateLength"/><br/> 
            is specified, it will be used. If none - <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.TemplateLength"/> will be autoselected.
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.Templates">
            <summary>
            An array of templates to be used for testing (null to disable this parameter).<br/>
            If one of the following parameters (in order of priority):<br/> 
            1. <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.Templates"/><br/> 
            2. <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.Template"/><br/> 
            3. <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.TemplateLength"/><br/> 
            is specified, it will be used. If none - <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.TemplateLength"/> will be autoselected.
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.TemplateLength">
            <summary>
            All possible templates of this length will be generated and used for testing (-1 for autoselection).<br/>
            If one of the following parameters (in order of priority):<br/> 
            1. <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.Templates"/><br/> 
            2. <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.Template"/><br/> 
            3. <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.TemplateLength"/><br/> 
            is specified, it will be used. If none - <see cref="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.TemplateLength"/> will be autoselected.
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchingsParams.BlockLength">
            <summary>
            Length of a single block (-1 for autoselection)
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams">
            <summary>
            Parameters of the overlapping template matchings test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.Template">
            <summary>
            Template to be used for testing (null to disable this parameter).<br/> 
            If one of the following parameters (in order of priority):<br/> 
            1. <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.Templates"/><br/> 
            2. <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.Template"/><br/> 
            3. <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.TemplateLength"/><br/> 
            is specified, it will be used. If none - <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.TemplateLength"/> will be autoselected.
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.Templates">
            <summary>
            An array of templates to be used for testing (null to disable this parameter).<br/>
            If one of the following parameters (in order of priority):<br/> 
            1. <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.Templates"/><br/> 
            2. <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.Template"/><br/> 
            3. <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.TemplateLength"/><br/> 
            is specified, it will be used. If none - <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.TemplateLength"/> will be autoselected.
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.TemplateLength">
            <summary>
            A template of all ones of this length will be generated and used for testing (-1 for autoselection).<br/>
            If one of the following parameters (in order of priority):<br/> 
            1. <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.Templates"/><br/> 
            2. <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.Template"/><br/> 
            3. <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.TemplateLength"/><br/> 
            is specified, it will be used. If none - <see cref="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.TemplateLength"/> will be autoselected.
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.DegreesOfFreedom">
            <summary>
            Degrees of freedom of the chi-squared distribution (-1 for autoselection)
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchingsParams.BlockLength">
            <summary>
            Length of a single block (-1 for autoselection)
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.TestParameters.MaurersUniversalParams">
            <summary>
            Parameters of the Maurer's universal test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.MaurersUniversalParams.BlockLength">
            <summary>
            Length of a single block (-1 for autoselection)
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.MaurersUniversalParams.InitializationBlocks">
            <summary>
            A number of blocks used to initialize the table (-1 for autoselection)
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.TestParameters.LinearComplexityParams">
            <summary>
            Parameters of the linear complexity test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.LinearComplexityParams.BlockLength">
            <summary>
            Length of a single block (-1 for autoselection)
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.LinearComplexityParams.DegreesOfFreedom">
            <summary>
            Degrees of freedom of the chi-squared distribution (-1 for autoselection)
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.TestParameters.SerialParams">
            <summary>
            Parameters of the serial test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.SerialParams.BlockLength">
            <summary>
            Length of a single block (-1 for autoselection)
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.TestParameters.ApproximateEntropyParams">
            <summary>
            Parameters of the approximate entropy test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.ApproximateEntropyParams.BlockLength">
            <summary>
            Length of a single block (-1 for autoselection)
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.BlockFrequency">
            <summary>
            Parameters of the block frequency test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.BinaryMatrixRank">
            <summary>
            Parameters of the binary matrix rank test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.NonOverlappingTemplateMatchings">
            <summary>
            Parameters of the non-overlapping template matchings test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.OverlappingTemplateMatchings">
            <summary>
            Parameters of the overlapping template matchings test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.MaurersUniversal">
            <summary>
            Parameters of the Maurer's universal test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.LinearComplexity">
            <summary>
            Parameters of the linear complexity test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.Serial">
            <summary>
            Parameters of the serial test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.ApproximateEntropy">
            <summary>
            Parameters of the approximate entropy test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.LongTermEvaluation">
            <summary>
            Parameters of a long-term evaluation routine. It stores and checks a history of last test results to ensure no subtest fails too often: it can
            be an indication of a dependency within the data and therefore a generator flaw<br/>
            For more info, see section 2.14.8 of the paper
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTests.TestParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.NistTests.TestParameters" /> class
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTests.TestParameters.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.NistTests.TestParameters" /> class with test selection for the specified sequence size
            It is possible to test longer sequences, but test results for shorter ones will be nonrepresentative
            </summary>
            <param name="size">Minimum sequence size</param>
        </member>
        <member name="P:TrulyRandom.NistTests.TestParameters.MinSequenceSize">
            <summary>
            Minimum sequnce size required for the selected tests. It is still allowed to test shorter sequences, but results will be nonrepresentative
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTests.TestParameters.GetMinSequenceSize(TrulyRandom.NistTests.TestsEnum)">
            <summary>
            Minimum sequnce size required for the selected tests. It is still allowed to test shorter sequences, but results will be nonrepresentative
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTests.TestParameters.TestsForSize(System.Int32)">
            <summary>
            Selects tests for which sequence size is sufficient
            </summary>
            <param name="size">Minimum sequence size</param>
            <returns></returns>
        </member>
        <member name="T:TrulyRandom.NistTests.TestResultEnum">
            <summary>
            Specifies a detailed result of a test
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.TestResultEnum.Success">
            <summary>
            Test had succeeded
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.TestResultEnum.SuccessWithFailedSubtests">
            <summary>
            Test had succeeded, but some subtests have failed
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.TestResultEnum.BadPValues">
            <summary>
            Test had failed due to insufficient number of good p-values. Their history was not considered
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.TestResultEnum.IncufficientCycles">
            <summary>
            Test had failed due to insufficient number of cycles.
            Try to increase sequence size to reduce the number of such failures
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.TestResultEnum.BadHistory">
            <summary>
            Test had failed due at least one of the failed subtest having a bad history, even though failed test proportion was good enough 
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.LongTermEvaluationResultEnum">
            <summary>
            Specifies a result of a subtest long-term evaluation
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.LongTermEvaluationResultEnum.Success">
            <summary>
            Subtest had succeeded, so history check was not performed
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.LongTermEvaluationResultEnum.SuccessByDefault">
            <summary>
            Result history isn't long enough and PassByDefault option is enabled
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.LongTermEvaluationResultEnum.SuccessByHistory">
            <summary>
            Subtest history is good enough
            </summary>
        </member>
        <member name="F:TrulyRandom.NistTests.LongTermEvaluationResultEnum.Failure">
            <summary>
            Subtest had failed and its history is bad
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTests.TestResult">
            <summary>
            Evaluated result of a single test 
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestResult.Success">
            <summary>
            Shows if the test was successful
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestResult.SuccessfulSubtestProportion">
            <summary>
            Proportion of subtests with p-value &gt; <see cref="P:TrulyRandom.NistTests.TestParameters.SignificanceLevel"/>
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestResult.SubtestLongTermEvaluationResults">
            <summary>
            Results of a long-term evaluation of each of the subtest results
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestResult.PValues">
            <summary>
            P-values for the each of the subtests
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestResult.HistoricalSuccessRate">
            <summary>
            P-values for the each of the subtests
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestResult.ActuallyTestedBits">
            <summary>
            Number of bits which was actually tested by the test. Some tests discard some of the data if it is not enough to form a whole block
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestResult.Report">
            <summary>
            Human-readable report about the test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestResult.Result">
            <summary>
            Detailed result of a test
            </summary>
        </member>
        <member name="P:TrulyRandom.NistTests.TestResult.Time">
            <summary>
            Duration of the testing
            </summary>
        </member>
        <member name="T:TrulyRandom.NistTestUtils">
            <summary>
            Additional functions required by the test functions
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTestUtils.Erfc(System.Double)">
            <summary>
            Complementary Gauss error function
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTestUtils.Igamc(System.Double,System.Double)">
            <summary>
            Complemented incomplete gamma function.
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTestUtils.Igam(System.Double,System.Double)">
            <summary>
            Incomplete gamma function.
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTestUtils.Lgamma(System.Double)">
            <summary>
            Natural logarithm of gamma function.
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTestUtils.Lgam(System.Double)">
            <summary>
            Returns the natural logarithm of gamma function.
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTestUtils.Polevl(System.Double,System.Double[],System.Int32)">
            <summary>
            Polynomial of degree N
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTestUtils.P1evl(System.Double,System.Double[],System.Int32)">
            <summary>
            Polynomial of degree N with assumtion that coef[N] = 1.0
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTestUtils.ComputeRank(System.Int32,System.Int32,System.Boolean[0:,0:])">
            <summary>
            Rank of the matrix
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTestUtils.Normal(System.Double)">
            <summary>
            Returns the area under the Gaussian probability density function, integrated from minus infinity to a
            </summary>
        </member>
        <member name="M:TrulyRandom.NistTestUtils.Erf(System.Double)">
            <summary>
            Returns the error function of the specified number
            </summary>
        </member>
        <member name="T:TrulyRandom.CircularBuffer`1">
            <summary>
            Circular buffer optimized for frequent additions and removals of data
            </summary>
        </member>
        <member name="F:TrulyRandom.CircularBuffer`1.start">
            <summary>
            Index of the first element in buffer
            </summary>
        </member>
        <member name="F:TrulyRandom.CircularBuffer`1.end">
            <summary>
            Index after the last element in the buffer
            </summary>
        </member>
        <member name="F:TrulyRandom.CircularBuffer`1.count">
            <summary>
            Buffer size
            </summary>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.CircularBuffer`1"/> class
            </summary>
            <param name='capacity'>Buffer capacity</param>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.#ctor(System.Int32,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.CircularBuffer`1"/> class
            </summary>
            <param name='capacity'> Buffer capacity</param>
            <param name='items'> Items to fill buffer with</param>
        </member>
        <member name="P:TrulyRandom.CircularBuffer`1.Capacity">
            <summary>
            Maximum capacity of the buffer. Elements pushed into the buffer after
            maximum capacity is reached (IsFull = true), will remove an element
            </summary>
        </member>
        <member name="P:TrulyRandom.CircularBuffer`1.IsFull">
             <summary>
            Shows whether buffer is full
             </summary>
        </member>
        <member name="P:TrulyRandom.CircularBuffer`1.IsEmpty">
            <summary>
            Shows whether buffer is empty
            </summary>
        </member>
        <member name="P:TrulyRandom.CircularBuffer`1.Count">
            <summary>
            The number of elements in the buffer
            </summary>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.First">
            <summary>
            First element of the buffer
            </summary>
            <returns>The value of the first element of the buffer</returns>
        </member>
        <member name="P:TrulyRandom.CircularBuffer`1.Item(System.Int32)">
            <summary>
            Index access to elements in buffer
            </summary>
            <param name="index">Index of element to access</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is outside of [0; Count] interval.</exception>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.Write(`0)">
            <summary>
            Adds a new element to the end of the buffer
            When the buffer is full, the first element will be removed to allow for new element to fit
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.Write(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds several elements to the end of the buffer
            When the buffer is full, first elements will be removed to allow for new elements to fit
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.RemoveFirst">
            <summary>
            Removes first element of the buffer
            </summary>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.Read">
            <summary>
            Reads and removes first element of the buffer
            </summary>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.Read(System.Int32)">
            <summary>
            Reads and removes first <code>count</code> elements of the buffer
            </summary>
            <param name="count">Count of elements to be removed</param>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.ReadAll">
            <summary>
            Reads and removes all elements of the buffer
            </summary>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.Clear">
            <summary>
            Clears the contents of the array
            </summary>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.ToArray">
            <summary>
            Copies the buffer contents to an array
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.ToArraySegments">
             <summary>
             Get the contents of the buffer as 2 ArraySegments.
             Respects the logical contents of the buffer, where
             each segment and items in each segment are ordered
             according to insertion.
            
             Fast: does not copy the array elements.
             Useful for methods like <c>Send(IList&lt;ArraySegment&lt;Byte&gt;&gt;)</c>.
             
             <remarks>Segments may be empty.</remarks>
             </summary>
             <returns>An IList with 2 segments corresponding to the buffer content.</returns>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this buffer.
            </summary>
            <returns>An enumerator that can be used to iterate this collection.</returns>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.Increment(System.Int32@)">
            <summary>
            Increments the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:TrulyRandom.CircularBuffer`1.InternalIndex(System.Int32)">
            <summary>
            Converts the index in the argument to an index in <code>_buffer</code>
            </summary>
            <returns>
            The transformed index.
            </returns>
            <param name='index'>
            External index.
            </param>
        </member>
        <member name="T:TrulyRandom.Constants">
            <summary>
            Global constants
            </summary>
        </member>
        <member name="T:TrulyRandom.DataSource">
            <summary>
            Provides method for end-user to retrieve random data of various types 
            </summary>
        </member>
        <member name="P:TrulyRandom.DataSource.BitsAvailable">
            <summary>
            Number if bits currently available in the buffer
            </summary>
        </member>
        <member name="M:TrulyRandom.DataSource.GetBit">
            <summary>
            Gets a single random bit
            </summary>
            <returns>Random bit</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetByte">
            <summary>
            Gets a single random byte
            </summary>
            <returns>Random byte</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetBytes(System.Int32)">
            <summary>
            Gets an array of random bytes
            </summary>
            <param name="count">Number of bytes</param>
            <returns>Random bytes</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetULong">
            <summary>
            Gets a random ULong
            </summary>
            <returns>Random ULong</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetULong(System.UInt64)">
            <summary>
            Gets a random ULong in a range between 0 and <paramref name="maxValue"/>
            </summary>
            <param name="maxValue">Upper bound (not inclusive)</param>
            <returns>Random ULong</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetULong(System.UInt64,System.UInt64)">
            <summary>
            Gets a random ULong in a range between <paramref name="minValue"/> and <paramref name="maxValue"/>
            </summary>
            <param name="minValue">Lower bound (inclusive)</param>
            <param name="maxValue">Upper bound (not inclusive)</param>
            <returns>Random ULong</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
            <exception cref="T:System.ArgumentException">Thrown if bounds are specified incorrectly</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetLong">
            <summary>
            Gets a random long
            </summary>
            <returns>Random long</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetLong(System.Int64)">
            <summary>
            Gets a random long in a range between 0 and <paramref name="maxValue"/>
            </summary>
            <param name="maxValue">Upper bound (not inclusive)</param>
            <returns>Random long</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
            <exception cref="T:System.ArgumentException">Thrown if bound is specified incorrectly</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetLong(System.Int64,System.Int64)">
            <summary>
            Gets a random long in a range between <paramref name="minValue"/> and <paramref name="maxValue"/>
            </summary>
            <param name="minValue">Lower bound (inclusive)</param>
            <param name="maxValue">Upper bound (not inclusive)</param>
            <returns>Random long</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
            <exception cref="T:System.ArgumentException">Thrown if bounds are specified incorrectly</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetUInt">
            <summary>
            Gets a random UInt
            </summary>
            <returns>Random UInt</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetUInt(System.UInt32)">
            <summary>
            Gets a random UInt in a range between 0 and <paramref name="maxValue"/>
            </summary>
            <param name="maxValue">Upper bound (not inclusive)</param>
            <returns>Random UInt</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetUInt(System.UInt32,System.UInt32)">
            <summary>
            Gets a random UInt in a range between <paramref name="minValue"/> and <paramref name="maxValue"/>
            </summary>
            <param name="minValue">Lower bound (inclusive)</param>
            <param name="maxValue">Upper bound (not inclusive)</param>
            <returns>Random UInt</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
            <exception cref="T:System.ArgumentException">Thrown if bounds are specified incorrectly</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetInt">
            <summary>
            Gets a random int
            </summary>
            <returns>Random int</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetInt(System.Int32)">
            <summary>
            Gets a random int in a range between 0 and <paramref name="maxValue"/>
            </summary>
            <param name="maxValue">Upper bound (not inclusive)</param>
            <returns>Random int</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
            <exception cref="T:System.ArgumentException">Thrown if bound is specified incorrectly</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetInt(System.Int32,System.Int32)">
            <summary>
            Gets a random int in a range between <paramref name="minValue"/> and <paramref name="maxValue"/>
            </summary>
            <param name="minValue">Lower bound (inclusive)</param>
            <param name="maxValue">Upper bound (not inclusive)</param>
            <returns>Random int</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
            <exception cref="T:System.ArgumentException">Thrown if bounds are specified incorrectly</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetDouble(System.Boolean,System.Boolean)">
            <summary>
            Gets a random double in a range between 0 and 1
            </summary>
            <param name="including0">Specifies whether 0 should be incuded</param>
            <param name="including1">Specifies whether 1 should be incuded</param>
            <returns>Random double</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetDouble(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets a random double in a range between 0 and 1 (inclusive)
            </summary>
            <param name="minValue">Lower bound</param>
            <param name="maxValue">Upper bound</param>
            <param name="includingMin">Specifies whether minValue should be incuded</param>
            <param name="includingMax">Specifies whether maxValue should be incuded</param>
            <returns>Random double</returns>
            <exception cref="T:TrulyRandom.OutOfRandomnessException">Thrown if there is not enough data in the buffer</exception>
        </member>
        <member name="M:TrulyRandom.DataSource.GetNormal(System.Double,System.Double)">
            <summary>
            Gets a random double that follows Gaussian (normal) distribution
            </summary>
            <param name="mean">Mean value</param>
            <param name="stdDev">Standard deviation</param>
            <returns></returns>
        </member>
        <member name="M:TrulyRandom.DataSource.Shuffle``1(``0[])">
            <summary>
            Randomly shuffles specified array using Fisher–Yates algorithm
            </summary>
            <typeparam name="T">Type of an array element</typeparam>
            <param name="array">Array to be shuffled</param>
        </member>
        <member name="T:TrulyRandom.DeviceNotFoundException">
            <summary>
            The exception that is thrown when no suitable device can be found
            </summary>
        </member>
        <member name="M:TrulyRandom.DeviceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.DeviceNotFoundException"/> class
            </summary>
        </member>
        <member name="M:TrulyRandom.DeviceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.DeviceNotFoundException"/> class with a specified error message
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="M:TrulyRandom.DeviceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.DeviceNotFoundException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:TrulyRandom.DeviceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.DeviceNotFoundException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:TrulyRandom.OutOfRandomnessException">
            <summary>
            The exception that is thrown when the buffer doesn't contain sufficient random data to fulfill the request
            </summary>
        </member>
        <member name="M:TrulyRandom.OutOfRandomnessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.OutOfRandomnessException"/> class
            </summary>
        </member>
        <member name="M:TrulyRandom.OutOfRandomnessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.OutOfRandomnessException"/> class with a specified error message
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="M:TrulyRandom.OutOfRandomnessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.OutOfRandomnessException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:TrulyRandom.OutOfRandomnessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TrulyRandom.OutOfRandomnessException"/> class with serialized data
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:TrulyRandom.Utils">
            <summary>
            Miscellaneous functions
            </summary>
        </member>
        <member name="M:TrulyRandom.Utils.FormatBytes(System.Int64)">
            <summary>
            Formats the amount of bytes into a human-readable format
            </summary>
            <param name="value">Amount of bytes</param>
            <returns>Human-readable string</returns>
        </member>
        <member name="M:TrulyRandom.Utils.FormatBytes(System.UInt64)">
            <summary>
            Formats the amount of bytes into a human-readable format
            </summary>
            <param name="value">Amount of bytes</param>
            <returns>Human-readable string</returns>
        </member>
        <member name="M:TrulyRandom.Utils.EnumerateFlags``1(``0)">
            <summary>
            Turns a flags enumerable into an array of single-flag values
            </summary>
            <typeparam name="T">Enumerable type</typeparam>
            <param name="input">Flags enumerable</param>
            <returns>Array of single-flag values</returns>
        </member>
        <member name="M:TrulyRandom.Utils.MixData(System.Byte[][])">
            <summary>
            Mixes the data from multiple arrays
            </summary>
            <param name="data">Jagged array to be mixed</param>
            <returns>Mixed array</returns>
        </member>
        <member name="M:TrulyRandom.Utils.ParallelFor(System.Int32,System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="rangeSize">The partition size for splitting work into smaller pieces.</param>
            <param name="threads">Maximum number of threads</param>
            <param name="body">The body to be invoked for each iteration range.</param>
        </member>
        <member name="M:TrulyRandom.Utils.BreakExecution(System.DateTime@)">
            <summary>
            Ensures that execution of the method will be interrupted from time to time to ensure that other threads and processes get some processor time. 
            This prevents computer from lagging while executing some long task
            </summary>
            <param name="lastBreak">Variable that holds last break time for the current thread</param>
        </member>
    </members>
</doc>
